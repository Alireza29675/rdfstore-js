module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { DOCUMENT: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "other", description: "[1] QueryUnit" },
          { type: "other", description: "[2] Query" },
          peg$FAILED,
          function(p, q) {
              return {token: 'query',
                  kind: 'query',
                  prologue: p,
                  units: [q]};
          },
          { type: "other", description: "[3] Prologue" },
          null,
          [],
          function(b, pfx) {
              return { token: 'prologue',
                  base: b,
                  prefixes: pfx }
          },
          { type: "other", description: "[4] BaseDecl" },
          "BASE",
          { type: "literal", value: "BASE", description: "\"BASE\"" },
          "base",
          { type: "literal", value: "base", description: "\"base\"" },
          function(i) {
              registerDefaultPrefix(i);

              var base = {};
              base.token = 'base';
              base.value = i;

              return base;
          },
          { type: "other", description: "[5] PrefixDecl" },
          "PREFIX",
          { type: "literal", value: "PREFIX", description: "\"PREFIX\"" },
          "prefix",
          { type: "literal", value: "prefix", description: "\"prefix\"" },
          function(p, l) {

              registerPrefix(p,l);

              var prefix = {};
              prefix.token = 'prefix';
              prefix.prefix = p;
              prefix.local = l;

              return prefix;
          },
          { type: "other", description: "[6] SelectQuery" },
          function(s, gs, w, sm) {

              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'default') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'select';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.projection = s.vars;
              query.modifier = s.modifier;
              query.pattern = w

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              if(sm!=null && sm.group!=null) {
                  query.group = sm.group;
              }

              return query
          },
          { type: "other", description: "[7] SubSelect" },
          { type: "other", description: "[8] SelectClause" },
          "SELECT",
          { type: "literal", value: "SELECT", description: "\"SELECT\"" },
          "select",
          { type: "literal", value: "select", description: "\"select\"" },
          "DISTINCT",
          { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
          "distinct",
          { type: "literal", value: "distinct", description: "\"distinct\"" },
          "REDUCED",
          { type: "literal", value: "REDUCED", description: "\"REDUCED\"" },
          "reduced",
          { type: "literal", value: "reduced", description: "\"reduced\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          "AS",
          { type: "literal", value: "AS", description: "\"AS\"" },
          "as",
          { type: "literal", value: "as", description: "\"as\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function(mod, proj) {
              var vars = [];
              if(proj.length === 3 && proj[1]==="*") {
                  return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
              }

              for(var i=0; i< proj.length; i++) {
                  var aVar = proj[i];

                  if(aVar.length === 3) {
                      vars.push({token: 'variable', kind:'var', value:aVar[1]});
                  } else {
                      vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
                  }
              }

              return {vars: vars, modifier:arrayToString(mod)};
          },
          { type: "other", description: "[9] ConstructQuery" },
          "CONSTRUCT",
          { type: "literal", value: "CONSTRUCT", description: "\"CONSTRUCT\"" },
          "construct",
          { type: "literal", value: "construct", description: "\"construct\"" },
          function(t, gs, w, sm) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'default') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'construct';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.template = t;
              query.pattern = w

              if(sm!=null && sm.limit!=null) {
                  query.limit = sm.limit;
              }
              if(sm!=null && sm.offset!=null) {
                  query.offset = sm.offset;
              }
              if(sm!=null && (sm.order!=null && sm.order!="")) {
                  query.order = sm.order;
              }
              return query

          },
          { type: "other", description: "[10] DescribeQuery" },
          "DESCRIBE",
          { type: "literal", value: "DESCRIBE", description: "\"DESCRIBE\"" },
          { type: "other", description: "[11] AskQuery" },
          "ASK",
          { type: "literal", value: "ASK", description: "\"ASK\"" },
          "ask",
          { type: "literal", value: "ask", description: "\"ask\"" },
          function(gs, w) {
              var dataset = {'named':[], 'implicit':[]};
              for(var i=0; i<gs.length; i++) {
                  var g = gs[i];
                  if(g.kind === 'implicit') {
                      dataset['implicit'].push(g.graph);
                  } else {
                      dataset['named'].push(g.graph)
                  }
              }


              if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                  dataset['implicit'].push({token:'uri',
                      prefix:null,
                      suffix:null,
                      value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
              }

              var query = {};
              query.kind = 'ask';
              query.token = 'executableunit'
              query.dataset = dataset;
              query.pattern = w

              return query
          },
          { type: "other", description: "[12] DatasetClause" },
          "FROM",
          { type: "literal", value: "FROM", description: "\"FROM\"" },
          "from",
          { type: "literal", value: "from", description: "\"from\"" },
          function(gs) {
              return gs;
          },
          { type: "other", description: "[13] DefaultGraphClause" },
          function(s) {
              return {graph:s , kind:'default', token:'graphClause'}
          },
          { type: "other", description: "[14] NamedGraphClause" },
          "NAMED",
          { type: "literal", value: "NAMED", description: "\"NAMED\"" },
          "named",
          { type: "literal", value: "named", description: "\"named\"" },
          function(s) {
              return {graph:s, kind:'named', token:'graphCluase'};
          },
          { type: "other", description: "[15] SourceSelector" },
          { type: "other", description: "[16] WhereClause" },
          "WHERE",
          { type: "literal", value: "WHERE", description: "\"WHERE\"" },
          "where",
          { type: "literal", value: "where", description: "\"where\"" },
          function(g) {
              return g;
          },
          { type: "other", description: "[17] SolutionModifier" },
          function(gc, oc, lo) {
              var acum = {};
          if(lo != null) {
              if(lo.limit != null) {
                  acum.limit = lo.limit;
              }
              if(lo.offset != null) {
                  acum.offset = lo.offset;
              }
          }

          if(gc != null) {
              acum.group = gc;
          }

          acum.order = oc;

          return acum
          },
          { type: "other", description: "[18] GroupClause" },
          "GROUP",
          { type: "literal", value: "GROUP", description: "\"GROUP\"" },
          "group",
          { type: "literal", value: "group", description: "\"group\"" },
          "BY",
          { type: "literal", value: "BY", description: "\"BY\"" },
          "by",
          { type: "literal", value: "by", description: "\"by\"" },
          function(conds) {
              return conds;
          },
          { type: "other", description: "[19] GroupCondition" },
          function(b) {
              return b;
          },
          function(f) {
              return f;
          },
          function(e, alias) {
              if(alias.length != 0) {
              return {token: 'aliased_expression',
                  expression: e,
                  alias: alias[2] };
          } else {
              return e;
          }
          },
          function(v) {
              return v;
          },
          { type: "other", description: "[20] HavingClause" },
          "HAVING",
          { type: "literal", value: "HAVING", description: "\"HAVING\"" },
          { type: "other", description: "[21] HavingCondition" },
          { type: "other", description: "[22] OrderClause" },
          "ORDER",
          { type: "literal", value: "ORDER", description: "\"ORDER\"" },
          "order",
          { type: "literal", value: "order", description: "\"order\"" },
          function(os) {
              return os;
          },
          { type: "other", description: "[23] OrderCondition" },
          "ASC",
          { type: "literal", value: "ASC", description: "\"ASC\"" },
          "asc",
          { type: "literal", value: "asc", description: "\"asc\"" },
          "DESC",
          { type: "literal", value: "DESC", description: "\"DESC\"" },
          "desc",
          { type: "literal", value: "desc", description: "\"desc\"" },
          function(direction, e) {
              return { direction: direction.toUpperCase(), expression:e };
          },
          function(e) {
              if(e.token === 'var') {
              var e = { token:'expression',
                  expressionType:'atomic',
                  primaryexpression: 'var',
                  value: e };
          }
          return { direction: 'ASC', expression:e };
          },
          { type: "other", description: "[24] LimitOffsetClauses" },
          function(cls) {
              var acum = {};
              for(var i=0; i<cls.length; i++) {
                  var cl = cls[i];
                  if(cl.limit != null) {
                      acum['limit'] = cl.limit;
                  } else if(cl.offset != null){
                      acum['offset'] = cl.offset;
                  }
              }

              return acum;
          },
          { type: "other", description: "[25] LimitClause" },
          "LIMIT",
          { type: "literal", value: "LIMIT", description: "\"LIMIT\"" },
          "limit",
          { type: "literal", value: "limit", description: "\"limit\"" },
          function(i) {
              return { limit:parseInt(i.value) };
          },
          { type: "other", description: "[26] OffsetClause" },
          "OFFSET",
          { type: "literal", value: "OFFSET", description: "\"OFFSET\"" },
          "offset",
          { type: "literal", value: "offset", description: "\"offset\"" },
          function(i) {
              return { offset:parseInt(i.value) };
          },
          { type: "other", description: "[27] BindingsClause" },
          "BINDINGS",
          { type: "literal", value: "BINDINGS", description: "\"BINDINGS\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          { type: "other", description: "[28] BindingValue" },
          "UNDEF",
          { type: "literal", value: "UNDEF", description: "\"UNDEF\"" },
          { type: "other", description: "[29] UpdateUnit" },
          { type: "other", description: "[30] Update" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          function(p, u, us) {

              var query = {};
          query.token = 'query';
          query.kind = 'update'
          query.prologue = p;

          var units = [u];

          if(us.length != null && us[3] != null && us[3].units != null) {
              units = units.concat(us[3].units);
          }

          query.units = units;
          return query;
          },
          { type: "other", description: "[31] Update1" },
          { type: "other", description: "[32] Load" },
          "LOAD",
          { type: "literal", value: "LOAD", description: "\"LOAD\"" },
          "load",
          { type: "literal", value: "load", description: "\"load\"" },
          "INTO",
          { type: "literal", value: "INTO", description: "\"INTO\"" },
          "into",
          { type: "literal", value: "into", description: "\"into\"" },
          function(sg, dg) {
              var query = {};
          query.kind = 'load';
          query.token = 'executableunit'
          query.sourceGraph = sg;
          query.destinyGraph = dg[2];

          return query;
          },
          { type: "other", description: "[33] Clear" },
          "CLEAR",
          { type: "literal", value: "CLEAR", description: "\"CLEAR\"" },
          "clear",
          { type: "literal", value: "clear", description: "\"clear\"" },
          "SILENT",
          { type: "literal", value: "SILENT", description: "\"SILENT\"" },
          "silent",
          { type: "literal", value: "silent", description: "\"silent\"" },
          function(ref) {
              var query = {};
              query.kind = 'clear';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[34] Drop" },
          "DROP",
          { type: "literal", value: "DROP", description: "\"DROP\"" },
          "drop",
          { type: "literal", value: "drop", description: "\"drop\"" },
          function(ref) {
              var query = {};
              query.kind = 'drop';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[35] Create" },
          "CREATE",
          { type: "literal", value: "CREATE", description: "\"CREATE\"" },
          "create",
          { type: "literal", value: "create", description: "\"create\"" },
          function(ref) {
              var query = {};
              query.kind = 'create';
              query.token = 'executableunit'
              query.destinyGraph = ref;

              return query;
          },
          { type: "other", description: "[36] InsertData" },
          "INSERT",
          { type: "literal", value: "INSERT", description: "\"INSERT\"" },
          "insert",
          { type: "literal", value: "insert", description: "\"insert\"" },
          "DATA",
          { type: "literal", value: "DATA", description: "\"DATA\"" },
          "data",
          { type: "literal", value: "data", description: "\"data\"" },
          function(qs) {
              var query = {};
              query.kind = 'insertdata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[37] DeleteData" },
          "DELETE",
          { type: "literal", value: "DELETE", description: "\"DELETE\"" },
          "delete",
          { type: "literal", value: "delete", description: "\"delete\"" },
          function(qs) {
              var query = {};
              query.kind = 'deletedata';
              query.token = 'executableunit'
              query.quads = qs;

              return query;
          },
          { type: "other", description: "[38] DeleteWhere" },
          function(p) {
              var query = {};
              query.kind = 'modify';
              query.pattern = p;
              query.with = null;
              query.using = null;

              var quads = [];


              var patternsCollection = p.patterns[0];
              if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
                  patternsCollection = patternsCollection.patterns[0].triplesContext;
              } else {
                  patternsCollection = patternsCollection.triplesContext;
              }

              for(var i=0; i<patternsCollection.length; i++) {
                  var quad = {};
                  var contextQuad = patternsCollection[i];

                  quad['subject'] = contextQuad['subject'];
                  quad['predicate'] = contextQuad['predicate'];
                  quad['object'] = contextQuad['object'];
                  quad['graph'] = contextQuad['graph'];

                  quads.push(quad);
              }

              query.delete = quads;

              return query;
          },
          { type: "other", description: "[39] Modify" },
          "WITH",
          { type: "literal", value: "WITH", description: "\"WITH\"" },
          "with",
          { type: "literal", value: "with", description: "\"with\"" },
          function(wg, dic, uc, p) {
              var query = {};
          query.kind = 'modify';

          if(wg != "") {
              query.with = wg[2];
          } else {
              query.with = null;
          }


          if(dic.length === 3 && dic[2] === '') {
              query.delete = dic[0];
              query.insert = null;
          } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
              query.delete = dic[0];
              query.insert = dic[2];
          } else  {
              query.insert = dic;
              query.delete = null;
          }

          if(uc != '') {
              query.using = uc;
          }

          query.pattern = p;

          return query;
          },
          { type: "other", description: "[40] DeleteClause" },
          function(q) {
              return q;
          },
          { type: "other", description: "[41] InsertClause" },
          { type: "other", description: "[42] UsingClause" },
          "USING",
          { type: "literal", value: "USING", description: "\"USING\"" },
          "using",
          { type: "literal", value: "using", description: "\"using\"" },
          function(g) {
              if(g.length!=null) {
                  return {kind: 'named', uri: g[2]};
              } else {
                  return {kind: 'default', uri: g};
              }
          },
          { type: "other", description: "[43] GraphRef" },
          "GRAPH",
          { type: "literal", value: "GRAPH", description: "\"GRAPH\"" },
          "graph",
          { type: "literal", value: "graph", description: "\"graph\"" },
          function(i) {
              return i;
          },
          { type: "other", description: "[44] GraphRefAll" },
          "DEFAULT",
          { type: "literal", value: "DEFAULT", description: "\"DEFAULT\"" },
          "default",
          { type: "literal", value: "default", description: "\"default\"" },
          function() {
              return 'default';
          },
          function() {
              return 'named';
          },
          "ALL",
          { type: "literal", value: "ALL", description: "\"ALL\"" },
          "all",
          { type: "literal", value: "all", description: "\"all\"" },
          function() {
              return 'all';
          },
          { type: "other", description: "[45] QuadPattern" },
          function(qs) {
              return qs.quadsContext;
          },
          { type: "other", description: "[46] QuadData" },
          { type: "other", description: "[47] Quads" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          function(ts, qs) {
              var quads = []
              if(ts.triplesContext != null && ts.triplesContext != null) {
                  for(var i=0; i<ts.triplesContext.length; i++) {
                      var triple = ts.triplesContext[i]
                      triple.graph = null;
                      quads.push(triple)
                  }
              }

              if(qs && qs.length>0 && qs[0].length > 0) {
                  quads = quads.concat(qs[0][0].quadsContext);

                  if( qs[0][2] != null && qs[0][2].triplesContext != null) {
                      for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                          var triple = qs[0][2].triplesContext[i]
                          triple.graph = null;
                          quads.push(triple)
                      }
                  }
              }

              return {token:'quads',
                  quadsContext: quads}
          },
          { type: "other", description: "[48] QuadsNotTriples" },
          function(g, ts) {
              var quads = []
              for(var i=0; i<ts.triplesContext.length; i++) {
              var triple = ts.triplesContext[i]
              triple.graph = g;
              quads.push(triple)
          }

          return {token:'quadsnottriples',
              quadsContext: quads}
          },
          { type: "other", description: "[49] TriplesTemplate" },
          function(b, bs) {
              var triples = b.triplesContext;
          var toTest = null;
          if(typeof(bs) === 'object') {
              if(bs.length != null) {
                  if(bs[3].triplesContext!=null) {
                      triples = triples.concat(bs[3].triplesContext);
                  }
              }
          }

          return {token:'triplestemplate',
              triplesContext: triples}
          },
          { type: "other", description: "[50] GroupGraphPattern" },
          function(p) {
              return p;
          },
          { type: "other", description: "[51] GroupGraphPatternSub" },
          function(tb, tbs) {
              var subpatterns = [];
              if(tb != null && tb != []) {
                  subpatterns.push(tb);
              }

              for(var i=0; i<tbs.length; i++) {
                  for(var j=0; j< tbs[i].length; j++) {
                      if(tbs[i][j] != null && tbs[i][j].token != null) {
                          subpatterns.push(tbs[i][j]);
                      }
                  }
              }

              var compactedSubpatterns = [];

              var currentBasicGraphPatterns = [];
              var currentFilters = [];

              for(var i=0; i<subpatterns.length; i++) {
                  if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                      if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                          var triplesContext = [];
                          for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                              triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                          }
                          if(triplesContext.length > 0) {
                              compactedSubpatterns.push({token: 'basicgraphpattern',
                                  triplesContext: triplesContext});
                          }
                          currentBasicGraphPatterns = [];
                      }
                      compactedSubpatterns.push(subpatterns[i]);
                  } else {
                      if(subpatterns[i].token === 'triplespattern') {
                          currentBasicGraphPatterns.push(subpatterns[i]);
                      } else {
                          currentFilters.push(subpatterns[i]);
                      }
                  }
              }

              if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                  var triplesContext = [];
                  for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                      triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                  }
                  if(triplesContext.length > 0) {
                      compactedSubpatterns.push({token: 'basicgraphpattern',
                          triplesContext: triplesContext});
                  }
              }

          //      if(compactedSubpatterns.length == 1) {
          //          compactedSubpatterns[0].filters = currentFilters;
          //          return compactedSubpatterns[0];
          //      } else  {
              return { token: 'groupgraphpattern',
                  patterns: compactedSubpatterns,
                  filters: currentFilters }
          //      }
          },
          { type: "other", description: "[54] TriplesBlock" },
          function(b, bs) {
              var triples = b.triplesContext;
          var toTest = null;
          if(typeof(bs) === 'object') {
              if(bs != null && bs.length != null) {
                  if(bs[2] != null && bs[2].triplesContext!=null) {
                      triples = triples.concat(bs[2].triplesContext);
                  }
              }
          }

          return {token:'triplespattern',
              triplesContext: triples}
          },
          { type: "other", description: "[53] GraphPatternNotTriples" },
          { type: "other", description: "[54] OptionalGraphPattern" },
          "OPTIONAL",
          { type: "literal", value: "OPTIONAL", description: "\"OPTIONAL\"" },
          "optional",
          { type: "literal", value: "optional", description: "\"optional\"" },
          function(v) {
              return { token: 'optionalgraphpattern',
                  value: v }
          },
          { type: "other", description: "[55] GraphGraphPattern" },
          function(g, gg) {
              for(var i=0; i<gg.patterns.length; i++) {
                  var quads = []
                  var ts = gg.patterns[i];
                  for(var j=0; j<ts.triplesContext.length; j++) {
                      var triple = ts.triplesContext[j]
                      triple.graph = g;
                  }
              }

              gg.token = 'groupgraphpattern'
              return gg;
          },
          { type: "other", description: "[56] ServiceGraphPattern" },
          "SERVICE",
          { type: "literal", value: "SERVICE", description: "\"SERVICE\"" },
          function(v, ts) {
              return {token: 'servicegraphpattern',
                  status: 'todo',
                  value: [v,ts] }
          },
          { type: "other", description: "[57] MinusGraphPattern" },
          "MINUS",
          { type: "literal", value: "MINUS", description: "\"MINUS\"" },
          function(ts) {
              return {token: 'minusgraphpattern',
                  status: 'todo',
                  value: ts}
          },
          { type: "other", description: "[58] GroupOrUnionGraphPattern" },
          "UNION",
          { type: "literal", value: "UNION", description: "\"UNION\"" },
          "union",
          { type: "literal", value: "union", description: "\"union\"" },
          function(a, b) {
              if(b.length === 0) {
                  return a;
              } else {

                  var lastToken = {token: 'graphunionpattern',
                      value: [a]};

                  for(var i=0; i<b.length; i++) {
                      if(i==b.length-1) {
                          lastToken.value.push(b[i][3]);
                      } else {
                          lastToken.value.push(b[i][3]);
                          var newToken = {token: 'graphunionpattern',
                              value: [lastToken]}

                          lastToken = newToken;
                      }
                  }

                  return lastToken;

              }
          },
          { type: "other", description: "[59] Filter" },
          "FILTER",
          { type: "literal", value: "FILTER", description: "\"FILTER\"" },
          "filter",
          { type: "literal", value: "filter", description: "\"filter\"" },
          function(c) {
              return {token: 'filter',
                  value: c}
          },
          { type: "other", description: "[60] Constraint" },
          { type: "other", description: "[61] FunctionCall" },
          function(i, args) {
              var fcall = {};
              fcall.token = "expression";
              fcall.expressionType = 'irireforfunction'
              fcall.iriref = i;
              fcall.args = args.value;

              return fcall;
          },
          { type: "other", description: "[62] ArgList" },
          function() {
              var args = {};
              args.token = 'args';
              args.value = [];
              return args;
          },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(d, e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
                  cleanEx.push(es[i][1]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              if(d!=null && d.toUpperCase()==="DISTINCT") {
                  args.distinct = true;
              } else {
                  args.distinct = false;
              }

              return args;
          },
          { type: "other", description: "[63] ExpressionList" },
          function(e, es) {
              var cleanEx = [];

              for(var i=0; i<es.length; i++) {
                  cleanEx.push(es[i][3]);
              }
              var args = {};
              args.token = 'args';
              args.value = [e].concat(cleanEx);

              return args;
          },
          { type: "other", description: "[64] ConstructTemplate" },
          function(ts) {
              return ts;
          },
          { type: "other", description: "[65] ConstructTriples" },
          { type: "other", description: "[66] TriplesSameSubject" },
          function(s, pairs) {
              var triplesContext = pairs.triplesContext;
              var subject = s;
              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      var triple = null;
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]
                      if(subject.token && subject.token==='triplesnodecollection') {
                          triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                          triplesContext = triplesContext.concat(subject.triplesContext);
                      } else {
                          triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]

                      if(tn.token === "triplesnodecollection") {
                          for(var j=0; j<subject.length; j++) {
                              var subj = subject[j];
                              if(subj.triplesContext != null) {
                                  var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                  triplesContext.concat(subj.triplesContext);
                              } else {
                                  var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                  triplesContext.push(triple);
                              }
                          }
                      } else {
                          var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;
          },
          { type: "other", description: "[67] PropertyListNotEmpty" },
          function(v, ol, rest) {
              var token = {}
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

                  if(ol[i].triplesContext != null) {
                      triplesContext = triplesContext.concat(ol[i].triplesContext);
                      if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                          pairs.push([v, ol[i].chainSubject[0]]);
                      } else {
                          pairs.push([v, ol[i].chainSubject]);
                      }

                  } else {
                      pairs.push([v, ol[i]])
                  }

              }


              for(var i=0; i<rest.length; i++) {
                  var tok = rest[i][3];
                  var newVerb  = tok[0];
                  var newObjsList = tok[2] || [];

                  for(var j=0; j<newObjsList.length; j++) {
                      if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                          pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                          pairs.push([newVerb, newObjsList[j]])
                      }
                  }
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;

          },
          { type: "other", description: "[68] PropertyList" },
          { type: "other", description: "[69] ObjectList" },
          function(obj, objs) {

              var toReturn = [];

              toReturn.push(obj);

              for(var i=0; i<objs.length; i++) {
                  for(var j=0; j<objs[i].length; j++) {
                      if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                          toReturn.push(objs[i][j]);
                      }
                  }
              }

              return toReturn;
          },
          { type: "other", description: "[70] Object" },
          { type: "other", description: "[71] Verb" },
          "a",
          { type: "literal", value: "a", description: "\"a\"" },
          function() {
              return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
          },
          { type: "other", description: "[72] TriplesSameSubjectPath" },
          function(tn, pairs) {
              var triplesContext = tn.triplesContext;
              var subject = tn.chainSubject;

              if(pairs.pairs) {
                  for(var i=0; i< pairs.pairs.length; i++) {
                      var pair = pairs.pairs[i];
                      if(pair[1].length != null)
                          pair[1] = pair[1][0]

                      if(tn.token === "triplesnodecollection") {
                          for(var j=0; j<subject.length; j++) {
                              var subj = subject[j];
                              if(subj.triplesContext != null) {
                                  var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                  triplesContext.concat(subj.triplesContext);
                              } else {
                                  var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                  triplesContext.push(triple);
                              }
                          }
                      } else {
                          var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                          triplesContext.push(triple);
                      }
                  }
              }

              var token = {};
              token.token = "triplessamesubject";
              token.triplesContext = triplesContext;
              token.chainSubject = subject;

              return token;

          },
          { type: "other", description: "[73] PropertyListNotEmptyPath" },
          function(v, ol, rest) {
              token = {}
              token.token = 'propertylist';
              var triplesContext = [];
              var pairs = [];
              var test = [];

              for( var i=0; i<ol.length; i++) {

                  if(ol[i].triplesContext != null) {
                      triplesContext = triplesContext.concat(ol[i].triplesContext);
                      if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                          pairs.push([v, ol[i].chainSubject[0]]);
                      } else {
                          pairs.push([v, ol[i].chainSubject]);
                      }

                  } else {
                      pairs.push([v, ol[i]])
                  }

              }


              for(var i=0; i<rest.length; i++) {
                  var tok = rest[i][3];
                  var newVerb  = tok[0];
                  var newObjsList = tok[1] || [];

                  for(var j=0; j<newObjsList.length; j++) {
                      if(newObjsList[j].triplesContext != null) {
                          triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                          pairs.push([newVerb, newObjsList[j].chainSubject]);
                      } else {
                          pairs.push([newVerb, newObjsList[j]])
                      }
                  }
              }

              token.pairs = pairs;
              token.triplesContext = triplesContext;

              return token;
          },
          { type: "other", description: "[74] PropertyListPath" },
          { type: "other", description: "[75]" },
          function(p) {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;

              return p;
          },
          { type: "other", description: "[76] VerbSimple" },
          { type: "other", description: "[77] Path" },
          { type: "other", description: "[78] PathAlternative" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
                  return first;
              } else {
                  var acum = [];
                  for(var i=0; i<rest.length; i++)
                      acum.push(rest[1]);

                  var path = {};
                  path.token = 'path';
                  path.kind = 'alternative';
                  path.value = acum;

                  return path;
              }
          },
          { type: "other", description: "[79] PathSequence" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(first, rest) {
              if(rest == null || rest.length === 0) {
                  return first;
              } else {
                  var acum = [first];

                  for(var i=0; i<rest.length; i++)
                      acum.push(rest[i][1]);

                  var path = {};
                  path.token = 'path';
                  path.kind = 'sequence';

                  path.value = acum;

                  return path;
              }
          },
          { type: "other", description: "[88] PathElt" },
          function(p, mod) {
              if(p.token && p.token != 'path' && mod == '') {
              return p;
          } else if(p.token && p.token != path && mod != '') {
              var path = {};
              path.token = 'path';
              path.kind = 'element';
              path.value = p;
              path.modifier = mod;
              return path;
          } else {
              p.modifier = mod;
              return p;
          }
          },
          { type: "other", description: "[81] PathEltOrInverse" },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          function(elt) {
              var path = {};
              path.token = 'path';
              path.kind = 'inversePath';
              path.value = elt;

              return path;
          },
          { type: "other", description: "[82] PathMod" },
          "?",
          { type: "literal", value: "?", description: "\"?\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          { type: "other", description: "[83] PathPrimary" },
          "!",
          { type: "literal", value: "!", description: "\"!\"" },
          { type: "other", description: "[85] PathOneInPropertySet" },
          { type: "other", description: "[86] Integer" },
          { type: "other", description: "[87] TriplesNode" },
          function(c) {
              var triplesContext = [];
              var chainSubject = [];

              var triple = null;

              // catch NIL
              /*
               if(c.length == 1 && c[0].token && c[0].token === 'nil') {
               GlobalBlankNodeCounter++;
               return  {token: "triplesnodecollection",
               triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
               predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
               object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}],
               chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

               }
               */

              // other cases
              for(var i=0; i<c.length; i++) {
                  GlobalBlankNodeCounter++;
                  //_:b0  rdf:first  1 ;
                  //rdf:rest   _:b1 .
                  var nextObject = null;
                  if(c[i].chainSubject == null && c[i].triplesContext == null) {
                      nextObject = c[i];
                  } else {
                      nextObject = c[i].chainSubject;
                      triplesContext = triplesContext.concat(nextSubject.triplesContext);
                  }
                  var currentSubject = null;
                  triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                      predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                      object:nextObject };

                  if(i==0) {
                      chainSubject.push(triple.subject);
                  }

                  triplesContext.push(triple);

                  if(i===(c.length-1)) {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                  } else {
                      triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                          predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                          object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
                  }

                  triplesContext.push(triple);
              }

              return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
          },
          { type: "other", description: "[88] BlankNodePropertyList" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(pl) {

              GlobalBlankNodeCounter++;
          var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
          var newTriples =  [];

          for(var i=0; i< pl.pairs.length; i++) {
              var pair = pl.pairs[i];
              var triple = {}
              triple.subject = subject;
              triple.predicate = pair[0];
              if(pair[1].length != null)
                  pair[1] = pair[1][0]
              triple.object = pair[1];
              newTriples.push(triple);
          }

          return {token: 'triplesnode',
              kind: 'blanknodepropertylist',
              triplesContext: pl.triplesContext.concat(newTriples),
              chainSubject: subject};
          },
          { type: "other", description: "[89] Collection" },
          function(gn) {
              return gn;
          },
          { type: "other", description: "[90] GraphNode" },
          function(gn) {
              return gn[1];
          },
          { type: "other", description: "[91] VarOrTerm" },
          { type: "other", description: "[92] VarOrIRIref" },
          { type: "other", description: "[93] Var" },
          function(v) {
              var term = {};
              term.token = 'var';
              term.value = v;
              return term;
          },
          { type: "other", description: "[94] GraphTerm" },
          { type: "other", description: "[95] Expression" },
          { type: "other", description: "[96] ConditionalOrExpression" },
          "||",
          { type: "literal", value: "||", description: "\"||\"" },
          function(v, vs) {
              if(vs.length === 0) {
                  return v;
              }

              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionalor";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
                  ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[97] ConditionalAndExpression" },
          "&&",
          { type: "literal", value: "&&", description: "\"&&\"" },
          function(v, vs) {
              if(vs.length === 0) {
                  return v;
              }
              var exp = {};
              exp.token = "expression";
              exp.expressionType = "conditionaland";
              var ops = [v];

              for(var i=0; i<vs.length; i++) {
                  ops.push(vs[i][3]);
              }

              exp.operands = ops;

              return exp;
          },
          { type: "other", description: "[98] ValueLogical" },
          { type: "other", description: "[99] RelationalExpression" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "I",
          { type: "literal", value: "I", description: "\"I\"" },
          "i",
          { type: "literal", value: "i", description: "\"i\"" },
          "N",
          { type: "literal", value: "N", description: "\"N\"" },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          "O",
          { type: "literal", value: "O", description: "\"O\"" },
          "o",
          { type: "literal", value: "o", description: "\"o\"" },
          "T",
          { type: "literal", value: "T", description: "\"T\"" },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function(op1, op2) {
              if(op2.length === 0) {
                  return op1;
              } else if(op2[0][1] === 'i' || op2[0][1] === 'I' || op2[0][1] === 'n' || op2[0][1] === 'N'){
                  var exp = {};

                  if(op2[0][1] === 'i' || op2[0][1] === 'I') {
                      var operator = "=";
                      exp.expressionType = "conditionalor"
                  } else {
                      var operator = "!=";
                      exp.expressionType = "conditionaland"
                  }
                  var lop = op1;
                  var rops = []
                  for(var opi=0; opi<op2[0].length; opi++) {
                      if(op2[0][opi].token ==="args") {
                          rops = op2[0][opi].value;
                          break;
                      }
                  }

                  exp.token = "expression";
                  exp.operands = [];
                  for(var i=0; i<rops.length; i++) {
                      var nextOperand = {};
                      nextOperand.token = "expression";
                      nextOperand.expressionType = "relationalexpression";
                      nextOperand.operator = operator;
                      nextOperand.op1 = lop;
                      nextOperand.op2 = rops[i];

                      exp.operands.push(nextOperand);
                  }
                  return exp;
              } else {
                  var exp = {};
                  exp.expressionType = "relationalexpression"
                  exp.operator = op2[0][1];
                  exp.op1 = op1;
                  exp.op2 = op2[0][3];
                  exp.token = "expression";

                  return exp;
              }
          },
          { type: "other", description: "[100] NumericExpression" },
          { type: "other", description: "[101] AdditiveExpression" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function(op1, ops) {
              if(ops.length === 0) {
                  return op1;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'additiveexpression';
              ex.summand = op1;
              ex.summands = [];

              for(var i=0; i<ops.length; i++) {
                  var summand = ops[i];
                  var sum = {};
                  if(summand.length == 4 && typeof(summand[1]) === "string") {
                      sum.operator = summand[1];
                      sum.expression = summand[3];
                  } else {
                      var subexp = {}
                      var firstFactor = sum[0];
                      var operator = sum[1][1];
                      var secondFactor = sum[1][3];
                      var operator = null;
                      if(firstFactor.value < 0) {
                          sum.operator = '-';
                          firstFactor.value = - firstFactor.value;
                      } else {
                          sum.operator = '+';
                      }
                      subexp.token = 'expression';
                      subexp.expressionType = 'multiplicativeexpression';
                      subexp.operator = firstFactor;
                      subexp.factors = [{operator: operator, expression: secondFactor}];

                      sum.expression = subexp;
                  }
                  ex.summands.push(sum);
              }

              return ex;
          },
          { type: "other", description: "[102] MultiplicativeExpression" },
          function(exp, exps) {
              if(exps.length === 0) {
                  return exp;
              }

              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'multiplicativeexpression';
              ex.factor = exp;
              ex.factors = [];
              for(var i=0; i<exps.length; i++) {
                  var factor = exps[i];
                  var fact = {};
                  fact.operator = factor[1];
                  fact.expression = factor[3];
                  ex.factors.push(fact);
              }

              return ex;
          },
          { type: "other", description: "[103] UnaryExpression" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "!";
              ex.expression = e;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "+";
              ex.expression = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'unaryexpression';
              ex.unaryexpression = "-";
              ex.expression = v;

              return ex;
          },
          { type: "other", description: "[104] PrimaryExpression" },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'rdfliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'numericliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'booleanliteral';
              ex.value = v;

              return ex;
          },
          function(v) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'atomic';
              ex.primaryexpression = 'var';
              ex.value = v;

              return ex;
          },
          { type: "other", description: "[105] BrackettedExpression" },
          function(e) {
              return e;
          },
          { type: "other", description: "[106] BuiltInCall" },
          "STR",
          { type: "literal", value: "STR", description: "\"STR\"" },
          "str",
          { type: "literal", value: "str", description: "\"str\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'str'
              ex.args = [e]

              return ex;
          },
          "LANG",
          { type: "literal", value: "LANG", description: "\"LANG\"" },
          "lang",
          { type: "literal", value: "lang", description: "\"lang\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'lang'
              ex.args = [e]

              return ex;
          },
          "LANGMATCHES",
          { type: "literal", value: "LANGMATCHES", description: "\"LANGMATCHES\"" },
          "langmatches",
          { type: "literal", value: "langmatches", description: "\"langmatches\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'langmatches'
              ex.args = [e1,e2]

              return ex;
          },
          "DATATYPE",
          { type: "literal", value: "DATATYPE", description: "\"DATATYPE\"" },
          "datatype",
          { type: "literal", value: "datatype", description: "\"datatype\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'datatype'
              ex.args = [e]

              return ex;
          },
          "BOUND",
          { type: "literal", value: "BOUND", description: "\"BOUND\"" },
          "bound",
          { type: "literal", value: "bound", description: "\"bound\"" },
          function(v) {
              var ex = {};
              ex.token = 'expression'
              ex.expressionType = 'builtincall'
              ex.builtincall = 'bound'
              ex.args = [v]

              return ex;
          },
          "IRI",
          { type: "literal", value: "IRI", description: "\"IRI\"" },
          "iri",
          { type: "literal", value: "iri", description: "\"iri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'iri'
              ex.args = [e];

              return ex;
          },
          "URI",
          { type: "literal", value: "URI", description: "\"URI\"" },
          "uri",
          { type: "literal", value: "uri", description: "\"uri\"" },
          function(e) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'uri'
              ex.args = [e];

              return ex;
          },
          "BNODE",
          { type: "literal", value: "BNODE", description: "\"BNODE\"" },
          "bnode",
          { type: "literal", value: "bnode", description: "\"bnode\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'bnode';
              if(arg.length === 5) {
                  ex.args = [arg[2]];
              } else {
                  ex.args = null;
              }

              return ex;
          },
          "COALESCE",
          { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
          "coalesce",
          { type: "literal", value: "coalesce", description: "\"coalesce\"" },
          function(args) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'coalesce';
              ex.args = args;

              return ex;
          },
          "IF",
          { type: "literal", value: "IF", description: "\"IF\"" },
          "if",
          { type: "literal", value: "if", description: "\"if\"" },
          function(test, trueCond, falseCond) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'if';
              ex.args = [test,trueCond,falseCond];

              return ex;
          },
          "ISLITERAL",
          { type: "literal", value: "ISLITERAL", description: "\"ISLITERAL\"" },
          "isliteral",
          { type: "literal", value: "isliteral", description: "\"isliteral\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isliteral';
              ex.args = [arg];

              return ex;
          },
          "ISBLANK",
          { type: "literal", value: "ISBLANK", description: "\"ISBLANK\"" },
          "isblank",
          { type: "literal", value: "isblank", description: "\"isblank\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isblank';
              ex.args = [arg];

              return ex;
          },
          "SAMETERM",
          { type: "literal", value: "SAMETERM", description: "\"SAMETERM\"" },
          "sameterm",
          { type: "literal", value: "sameterm", description: "\"sameterm\"" },
          function(e1, e2) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'sameterm';
              ex.args = [e1, e2];
              return ex;
          },
          "ISURI",
          { type: "literal", value: "ISURI", description: "\"ISURI\"" },
          "isuri",
          { type: "literal", value: "isuri", description: "\"isuri\"" },
          "ISIRI",
          { type: "literal", value: "ISIRI", description: "\"ISIRI\"" },
          "isiri",
          { type: "literal", value: "isiri", description: "\"isiri\"" },
          function(arg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'isuri';
              ex.args = [arg];

              return ex;
          },
          "custom:",
          { type: "literal", value: "custom:", description: "\"custom:\"" },
          "CUSTOM:",
          { type: "literal", value: "CUSTOM:", description: "\"CUSTOM:\"" },
          /^[a-zA-Z0-9_]/,
          { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
          function(fnname, alter, finalarg) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'custom';
              ex.name = fnname.join('');
              var acum = [];
              for(var i=0; i<alter.length; i++)
                  acum.push(alter[i][1]);
              acum.push(finalarg);
              ex.args = acum;

              return ex;
          },
          { type: "other", description: "[107] RegexExpression" },
          "REGEX",
          { type: "literal", value: "REGEX", description: "\"REGEX\"" },
          "regex",
          { type: "literal", value: "regex", description: "\"regex\"" },
          function(e1, e2, eo) {
              var regex = {};
          regex.token = 'expression';
          regex.expressionType = 'regex';
          regex.text = e1;
          regex.pattern = e2;
          regex.flags = eo[2];

          return regex;
          },
          { type: "other", description: "[108] ExistsFunc" },
          "EXISTS",
          { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
          "exists",
          { type: "literal", value: "exists", description: "\"exists\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'exists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[109] NotExistsFunc" },
          "NOT",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          function(ggp) {
              var ex = {};
              ex.token = 'expression';
              ex.expressionType = 'builtincall';
              ex.builtincall = 'notexists';
              ex.args = [ggp];

              return ex;
          },
          { type: "other", description: "[110] Aggregate" },
          "COUNT",
          { type: "literal", value: "COUNT", description: "\"COUNT\"" },
          "count",
          { type: "literal", value: "count", description: "\"count\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'count';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "SUM",
          { type: "literal", value: "SUM", description: "\"SUM\"" },
          "sum",
          { type: "literal", value: "sum", description: "\"sum\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'sum';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MIN",
          { type: "literal", value: "MIN", description: "\"MIN\"" },
          "min",
          { type: "literal", value: "min", description: "\"min\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression';
          exp.expressionType = 'aggregate';
          exp.aggregateType = 'min';
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e;

          return exp;

          },
          "MAX",
          { type: "literal", value: "MAX", description: "\"MAX\"" },
          "max",
          { type: "literal", value: "max", description: "\"max\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'max'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          "AVG",
          { type: "literal", value: "AVG", description: "\"AVG\"" },
          "avg",
          { type: "literal", value: "avg", description: "\"avg\"" },
          function(d, e) {
              var exp = {};
          exp.token = 'expression'
          exp.expressionType = 'aggregate'
          exp.aggregateType = 'avg'
          exp.distinct = (d != "" ? 'DISTINCT' : d);
          exp.expression = e

          return exp

          },
          { type: "other", description: "[117] IRIrefOrFunction" },
          function(i, args) {
              var fcall = {};
          fcall.token = "expression";
          fcall.expressionType = 'irireforfunction';
          fcall.iriref = i;
          fcall.args = args.value;

          return fcall;
          },
          { type: "other", description: "[112] RDFLiteral" },
          "^^",
          { type: "literal", value: "^^", description: "\"^^\"" },
          function(s, e) {
              if(typeof(e) === "string" && e.length > 0) {
              return {token:'literal', value:s.value, lang:e.slice(1), type:null}
          } else {
              if(typeof(e) === "object") {
                  e.shift(); // remove the '^^' char
                  return {token:'literal', value:s.value, lang:null, type:e[0] }
              } else {
                  return { token:'literal', value:s.value, lang:null, type:null }
              }
          }
          },
          { type: "other", description: "[113] NumericLiteral" },
          { type: "other", description: "[114] NumericLiteralUnsigned" },
          { type: "other", description: "[115] NumericLiteralPositive" },
          { type: "other", description: "[116] NumericLiteralNegative" },
          { type: "other", description: "[117] BooleanLiteral" },
          "TRUE",
          { type: "literal", value: "TRUE", description: "\"TRUE\"" },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = true;
              return lit;
          },
          "FALSE",
          { type: "literal", value: "FALSE", description: "\"FALSE\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
              lit.value = false;
              return lit;
          },
          { type: "other", description: "[118] String" },
          function(s) { return {token:'string', value:s} },
          { type: "other", description: "[119] IRIref" },
          function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} },
          function(p) { return p },
          { type: "other", description: "[120] PrefixedName" },
          function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } },
          function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } },
          { type: "other", description: "[121] BlankNode" },
          function(l) { return {token:'blank', value:l}},
          function() { GlobalBlankNodeCounter++; return {token:'blank', value:'_:'+GlobalBlankNodeCounter} },
          { type: "other", description: "[122] IRI_REF" },
          /^[^<>"{}|\^`\\]/,
          { type: "class", value: "[^<>\"{}|\\^`\\\\]", description: "[^<>\"{}|\\^`\\\\]" },
          function(iri_ref) { return iri_ref.join('') },
          { type: "other", description: "[123] PNAME_NS" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          { type: "other", description: "[124] PNAME_LN" },
          function(p, s) { return [p, s] },
          { type: "other", description: "[125] BLANK_NODE_LABEL" },
          "_:",
          { type: "literal", value: "_:", description: "\"_:\"" },
          function(l) { return l },
          { type: "other", description: "[126] VAR1" },
          function(v) { return v },
          { type: "other", description: "[127] VAR2" },
          "$",
          { type: "literal", value: "$", description: "\"$\"" },
          { type: "other", description: "[128] LANGTAG" },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          /^[a-zA-Z0-9]/,
          { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
          function(a, b) {

              if(b.length===0) {
              return ("@"+a.join('')).toLowerCase();
              } else {
              return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
              }
              },
          { type: "other", description: "[129] INTEGER" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(d) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#integer";
              lit.value = flattenString(d);
              return lit;
              },
          { type: "other", description: "[130] DECIMAL" },
          function(a, b, c) {

              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[131] DOUBLE" },
          function(a, b, c, e) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c,e]);
              return lit;
              },
          function(a, b, c) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b,c]);
              return lit;
              },
          function(a, b) {
              var lit = {};
              lit.token = "literal";
              lit.lang = null;
              lit.type = "http://www.w3.org/2001/XMLSchema#double";
              lit.value = flattenString([a,b]);
              return lit;
              },
          { type: "other", description: "[132] INTEGER_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d; },
          { type: "other", description: "[133] DECIMAL_POSITIVE" },
          function(d) { d.value = "+"+d.value; return d },
          { type: "other", description: "[134] DOUBLE_POSITIVE" },
          { type: "other", description: "[135] INTEGER_NEGATIVE" },
          function(d) { d.value = "-"+d.value; return d; },
          { type: "other", description: "[136] DECIMAL_NEGATIVE" },
          { type: "other", description: "[137] DOUBLE_NEGATIVE" },
          { type: "other", description: "[138] EXPONENT" },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          /^[+\-]/,
          { type: "class", value: "[+\\-]", description: "[+\\-]" },
          function(a, b, c) { return flattenString([a,b,c]) },
          { type: "other", description: "[139] STRING_LITERAL1" },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          /^[^'\\\n\r]/,
          { type: "class", value: "[^'\\\\\\n\\r]", description: "[^'\\\\\\n\\r]" },
          function(content) { return flattenString(content) },
          { type: "other", description: "[140] STRING_LITERAL2" },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"\\\n\r]/,
          { type: "class", value: "[^\"\\\\\\n\\r]", description: "[^\"\\\\\\n\\r]" },
          { type: "other", description: "[141] STRING_LITERAL_LONG1" },
          "'''",
          { type: "literal", value: "'''", description: "\"'''\"" },
          /^[^'\\]/,
          { type: "class", value: "[^'\\\\]", description: "[^'\\\\]" },
          { type: "other", description: "[142] STRING_LITERAL_LONG2" },
          "\"\"\"",
          { type: "literal", value: "\"\"\"", description: "\"\\\"\\\"\\\"\"" },
          /^[^"\\]/,
          { type: "class", value: "[^\"\\\\]", description: "[^\"\\\\]" },
          { type: "other", description: "[143] ECHAR" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          /^[tbnrf"']/,
          { type: "class", value: "[tbnrf\"']", description: "[tbnrf\"']" },
          { type: "other", description: "[144] NIL" },
          function() {

              return  {token: "triplesnodecollection",
              triplesContext:[],
              chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
              },
          { type: "other", description: "[145] WS" },
          /^[ ]/,
          { type: "class", value: "[ ]", description: "[ ]" },
          /^[\t]/,
          { type: "class", value: "[\\t]", description: "[\\t]" },
          /^[\r]/,
          { type: "class", value: "[\\r]", description: "[\\r]" },
          /^[\n]/,
          { type: "class", value: "[\\n]", description: "[\\n]" },
          { type: "other", description: " COMMENT" },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          /^[^\n\r]/,
          { type: "class", value: "[^\\n\\r]", description: "[^\\n\\r]" },
          { type: "other", description: "[146] ANON" },
          { type: "other", description: "[147] PN_CHARS_BASE" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[\xC0-\xD6]/,
          { type: "class", value: "[\\xC0-\\xD6]", description: "[\\xC0-\\xD6]" },
          /^[\xD8-\xF6]/,
          { type: "class", value: "[\\xD8-\\xF6]", description: "[\\xD8-\\xF6]" },
          /^[\xF8-\u02FF]/,
          { type: "class", value: "[\\xF8-\\u02FF]", description: "[\\xF8-\\u02FF]" },
          /^[\u0370-\u037D]/,
          { type: "class", value: "[\\u0370-\\u037D]", description: "[\\u0370-\\u037D]" },
          /^[\u037F-\u1FFF]/,
          { type: "class", value: "[\\u037F-\\u1FFF]", description: "[\\u037F-\\u1FFF]" },
          /^[\u200C-\u200D]/,
          { type: "class", value: "[\\u200C-\\u200D]", description: "[\\u200C-\\u200D]" },
          /^[\u2070-\u218F]/,
          { type: "class", value: "[\\u2070-\\u218F]", description: "[\\u2070-\\u218F]" },
          /^[\u2C00-\u2FEF]/,
          { type: "class", value: "[\\u2C00-\\u2FEF]", description: "[\\u2C00-\\u2FEF]" },
          /^[\u3001-\uD7FF]/,
          { type: "class", value: "[\\u3001-\\uD7FF]", description: "[\\u3001-\\uD7FF]" },
          /^[\uF900-\uFDCF]/,
          { type: "class", value: "[\\uF900-\\uFDCF]", description: "[\\uF900-\\uFDCF]" },
          /^[\uFDF0-\uFFFD]/,
          { type: "class", value: "[\\uFDF0-\\uFFFD]", description: "[\\uFDF0-\\uFFFD]" },
          /^[\u1000-\uEFFF]/,
          { type: "class", value: "[\\u1000-\\uEFFF]", description: "[\\u1000-\\uEFFF]" },
          { type: "other", description: "[148] PN_CHARS_U" },
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          { type: "other", description: "[149] VARNAME" },
          /^[\xB7]/,
          { type: "class", value: "[\\xB7]", description: "[\\xB7]" },
          /^[\u0300-\u036F]/,
          { type: "class", value: "[\\u0300-\\u036F]", description: "[\\u0300-\\u036F]" },
          /^[\u203F-\u2040]/,
          { type: "class", value: "[\\u203F-\\u2040]", description: "[\\u203F-\\u2040]" },
          function(init, rpart) { return init+rpart.join('') },
          { type: "other", description: "[150] PN_CHARS" },
          { type: "other", description: "[151] PN_PREFIX" },
          function(base, rest) { if(rest[rest.length-1] == '.'){
              throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
              } else {
              return base + rest.join('');
              }},
          { type: "other", description: "[152] PN_LOCAL" },
          function(base, rest) {
              return base + rest.join('');
              }
        ],

        peg$bytecode = [
          peg$decode("7!"),
          peg$decode("7\"*# \"7>"),
          peg$decode("87#9*\" 3 "),
          peg$decode("8!7$+E$7'*/ \"7**) \"7+*# \"7,+)%4\"6#\"\"! %$\"# \"\"# \"9*\" 3!"),
          peg$decode("8!7%*# \" %+M$ &7\xB2,#&7\xB2\"+;% &7&,#&7&\"+)%4#6'#\"\" %$## \"$\"# \"\"# \"9*\" 3$"),
          peg$decode("8! &7\xB2,#&7\xB2\"+`$.)\"\"2)3**) \".+\"\"2+3,+D% &7\xB2,#&7\xB2\"+2%7\x9B+(%4$6-$! %$$# \"$## \"$\"# \"\"# \"9*\" 3("),
          peg$decode("8! &7\xB2,#&7\xB2\"+}$./\"\"2/30*) \".1\"\"2132+a% &7\xB2,#&7\xB2\"+O%7\x9C+E% &7\xB2,#&7\xB2\"+3%7\x9B+)%4&63&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3."),
          peg$decode("8!7)+\xA3$ &7\xB2,#&7\xB2\"+\x91% &7-,#&7-\"+% &7\xB2,#&7\xB2\"+m%71+c% &7\xB2,#&7\xB2\"+Q%72+G% &7\xB2,#&7\xB2\"+5%7<++%4)65)$(&$\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 34"),
          peg$decode("8!7)+7$71+-%72+#%'#%$## \"$\"# \"\"# \"9*\" 36"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\u02DB$.8\"\"2839*) \".:\"\"2:3;+\u02BF% &7\xB2,#&7\xB2\"+\u02AD%.<\"\"2<3=*) \".>\"\"2>3?*5 \".@\"\"2@3A*) \".B\"\"2B3C*# \" %+\u0273% &7\xB2,#&7\xB2\"+\u0261% &! &7\xB2,#&7\xB2\"+?$7~+5% &7\xB2,#&7\xB2\"+#%'#%$## \"$\"# \"\"# \"*\xE0 \"! &7\xB2,#&7\xB2\"+\xCD$.D\"\"2D3E+\xBD% &7\xB2,#&7\xB2\"+\xAB%7\x80+\xA1% &7\xB2,#&7\xB2\"+\x8F%.F\"\"2F3G*) \".H\"\"2H3I+s% &7\xB2,#&7\xB2\"+a%7~+W% &7\xB2,#&7\xB2\"+E%.J\"\"2J3K+5% &7\xB2,#&7\xB2\"+#%'+%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"+\u0118$,\u0115&! &7\xB2,#&7\xB2\"+?$7~+5% &7\xB2,#&7\xB2\"+#%'#%$## \"$\"# \"\"# \"*\xE0 \"! &7\xB2,#&7\xB2\"+\xCD$.D\"\"2D3E+\xBD% &7\xB2,#&7\xB2\"+\xAB%7\x80+\xA1% &7\xB2,#&7\xB2\"+\x8F%.F\"\"2F3G*) \".H\"\"2H3I+s% &7\xB2,#&7\xB2\"+a%7~+W% &7\xB2,#&7\xB2\"+E%.J\"\"2J3K+5% &7\xB2,#&7\xB2\"+#%'+%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"\"\" \"*X \"! &7\xB2,#&7\xB2\"+E$.L\"\"2L3M+5% &7\xB2,#&7\xB2\"+#%'#%$## \"$\"# \"\"# \"+)%4&6N&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 37"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\xBF$.P\"\"2P3Q*) \".R\"\"2R3S+\xA3% &7\xB2,#&7\xB2\"+\x91%7a+\x87% &7\xB2,#&7\xB2\"+u% &7-,#&7-\"+c% &7\xB2,#&7\xB2\"+Q%71+G% &7\xB2,#&7\xB2\"+5%72++%4*6T*$&$\" %$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3O"),
          peg$decode("8!.V\"\"2V3W+t$ &7}+&$,#&7}\"\"\" \"*) \".L\"\"2L3M+O% &7-,#&7-\"+=%71*# \" %+-%72+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3U"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x85$.Y\"\"2Y3Z*) \".[\"\"2[3\\+i% &7\xB2,#&7\xB2\"+W% &7-,#&7-\"+E% &7\xB2,#&7\xB2\"+3%71+)%4&6]&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3X"),
          peg$decode("8!._\"\"2_3`*) \".a\"\"2a3b+\\$ &7\xB2,#&7\xB2\"+J%7.*# \"7/+:% &7\xB2,#&7\xB2\"+(%4$6c$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3^"),
          peg$decode("8! &7\xB2,#&7\xB2\"+2$70+(%4\"6e\"! %$\"# \"\"# \"9*\" 3d"),
          peg$decode("8!.g\"\"2g3h*) \".i\"\"2i3j+D$ &7\xB2,#&7\xB2\"+2%70+(%4#6k#! %$## \"$\"# \"\"# \"9*\" 3f"),
          peg$decode("87\x989*\" 3l"),
          peg$decode("8!.n\"\"2n3o*) \".p\"\"2p3q*# \" %+V$ &7\xB2,#&7\xB2\"+D%7S+:% &7\xB2,#&7\xB2\"+(%4$6r$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3m"),
          peg$decode("8!73*# \" %+Z$75*# \" %+J%77*# \" %+:%79*# \" %+*%4$6t$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3s"),
          peg$decode("8!.v\"\"2v3w*) \".x\"\"2x3y+\x81$ &7\xB2,#&7\xB2\"+o%.z\"\"2z3{*) \".|\"\"2|3}+S% &7\xB2,#&7\xB2\"+A% &74+&$,#&74\"\"\" \"+(%4%6~%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3u"),
          peg$decode("8! &7\xB2,#&7\xB2\"+D$7\x8B+:% &7\xB2,#&7\xB2\"+(%4#6\x80#!!%$## \"$\"# \"\"# \"*\u016B \"! &7\xB2,#&7\xB2\"+D$7^+:% &7\xB2,#&7\xB2\"+(%4#6\x81#!!%$## \"$\"# \"\"# \"*\u0131 \"! &7\xB2,#&7\xB2\"+\xE4$.D\"\"2D3E+\xD4% &7\xB2,#&7\xB2\"+\xC2%7\x80+\xB8% &7\xB2,#&7\xB2\"+\xA6%!.F\"\"2F3G*) \".H\"\"2H3I+?$ &7\xB2,#&7\xB2\"+-%7~+#%'#%$## \"$\"# \"\"# \"*# \" %+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4)6\x82)\"%#%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*W \"! &7\xB2,#&7\xB2\"+D$7~+:% &7\xB2,#&7\xB2\"+(%4#6\x83#!!%$## \"$\"# \"\"# \"9*\" 3"),
          peg$decode("8!.\x85\"\"2\x853\x86+<$ &76+&$,#&76\"\"\" \"+#%'\"%$\"# \"\"# \"9*\" 3\x84"),
          peg$decode("87]9*\" 3\x87"),
          peg$decode("8!.\x89\"\"2\x893\x8A*) \".\x8B\"\"2\x8B3\x8C+\x93$ &7\xB2,#&7\xB2\"+\x81%.z\"\"2z3{*) \".|\"\"2|3}+e% &7\xB2,#&7\xB2\"+S% &78+&$,#&78\"\"\" \"+:% &7\xB2,#&7\xB2\"+(%4&6\x8D&!!%$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\x88"),
          peg$decode("8!.\x8F\"\"2\x8F3\x90*A \".\x91\"\"2\x913\x92*5 \".\x93\"\"2\x933\x94*) \".\x95\"\"2\x953\x96+W$ &7\xB2,#&7\xB2\"+E%7\x8A+;% &7\xB2,#&7\xB2\"+)%4$6\x97$\"#!%$$# \"$## \"$\"# \"\"# \"*K \"!7]*# \"7~+:$ &7\xB2,#&7\xB2\"+(%4\"6\x98\"!!%$\"# \"\"# \"9*\" 3\x8E"),
          peg$decode("8!!7:+3$7;*# \" %+#%'\"%$\"# \"\"# \"*> \"!7;+3$7:*# \" %+#%'\"%$\"# \"\"# \"+' 4!6\x9A!! %9*\" 3\x99"),
          peg$decode("8!.\x9C\"\"2\x9C3\x9D*) \".\x9E\"\"2\x9E3\x9F+V$ &7\xB2,#&7\xB2\"+D%7\xA2+:% &7\xB2,#&7\xB2\"+(%4$6\xA0$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3\x9B"),
          peg$decode("8!.\xA2\"\"2\xA23\xA3*) \".\xA4\"\"2\xA43\xA5+V$ &7\xB2,#&7\xB2\"+D%7\xA2+:% &7\xB2,#&7\xB2\"+(%4$6\xA6$!!%$$# \"$## \"$\"# \"\"# \"9*\" 3\xA1"),
          peg$decode("8!.\xA8\"\"2\xA83\xA9+\xE7$ &7~,#&7~\"+\xD5%.\xAA\"\"2\xAA3\xAB+\xC5% &!.D\"\"2D3E+L$ &7=+&$,#&7=\"\"\" \"+3%.J\"\"2J3K+#%'#%$## \"$\"# \"\"# \"*# \"7\xB1,c&!.D\"\"2D3E+L$ &7=+&$,#&7=\"\"\" \"+3%.J\"\"2J3K+#%'#%$## \"$\"# \"\"# \"*# \"7\xB1\"+3%.\xAC\"\"2\xAC3\xAD+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \" %9*\" 3\xA7"),
          peg$decode("87\x98*; \"7\x91*5 \"7\x92*/ \"7\x96*) \".\xAF\"\"2\xAF3\xB09*\" 3\xAE"),
          peg$decode("87?9*\" 3\xB1"),
          peg$decode("8!7$+\x9B$ &7\xB2,#&7\xB2\"+\x89%7@+%! &7\xB2,#&7\xB2\"+U$.\xB3\"\"2\xB33\xB4+E% &7\xB2,#&7\xB2\"+3%7?*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+*%4$6\xB5$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xB2"),
          peg$decode("87A*G \"7B*A \"7C*; \"7D*5 \"7E*/ \"7F*) \"7G*# \"7H9*\" 3\xB6"),
          peg$decode("8!.\xB8\"\"2\xB83\xB9*) \".\xBA\"\"2\xBA3\xBB+\xA0$ &7\xB2,#&7\xB2\"+\x8E%7\x98+\x84% &7\xB2,#&7\xB2\"+r%!.\xBC\"\"2\xBC3\xBD*) \".\xBE\"\"2\xBE3\xBF+?$ &7\xB2,#&7\xB2\"+-%7L+#%'#%$## \"$\"# \"\"# \"*# \" %+)%4%6\xC0%\"\" %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xB7"),
          peg$decode("8!.\xC2\"\"2\xC23\xC3*) \".\xC4\"\"2\xC43\xC5+x$ &7\xB2,#&7\xB2\"+f%.\xC6\"\"2\xC63\xC7*) \".\xC8\"\"2\xC83\xC9*# \" %+D% &7\xB2,#&7\xB2\"+2%7M+(%4%6\xCA%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xC1"),
          peg$decode("8!.\xCC\"\"2\xCC3\xCD*) \".\xCE\"\"2\xCE3\xCF+x$ &7\xB2,#&7\xB2\"+f%.\xC6\"\"2\xC63\xC7*) \".\xC8\"\"2\xC83\xC9*# \" %+D% &7\xB2,#&7\xB2\"+2%7M+(%4%6\xD0%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xCB"),
          peg$decode("8!.\xD2\"\"2\xD23\xD3*) \".\xD4\"\"2\xD43\xD5+x$ &7\xB2,#&7\xB2\"+f%.\xC6\"\"2\xC63\xC7*) \".\xC8\"\"2\xC83\xC9*# \" %+D% &7\xB2,#&7\xB2\"+2%7L+(%4%6\xD6%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xD1"),
          peg$decode("8!.\xD8\"\"2\xD83\xD9*) \".\xDA\"\"2\xDA3\xDB+r$ &7\xB2,#&7\xB2\"+`%.\xDC\"\"2\xDC3\xDD*) \".\xDE\"\"2\xDE3\xDF+D% &7\xB2,#&7\xB2\"+2%7O+(%4%6\xE0%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xD7"),
          peg$decode("8!.\xE2\"\"2\xE23\xE3*) \".\xE4\"\"2\xE43\xE5+`$ &7\xB2,#&7\xB2\"+N%.\xDC\"\"2\xDC3\xDD*) \".\xDE\"\"2\xDE3\xDF+2%7O+(%4$6\xE6$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xE1"),
          peg$decode("8!.\xE2\"\"2\xE23\xE3*) \".\xE4\"\"2\xE43\xE5+r$ &7\xB2,#&7\xB2\"+`%.n\"\"2n3o*) \".p\"\"2p3q+D% &7\xB2,#&7\xB2\"+2%7S+(%4%6\xE8%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xE7"),
          peg$decode("8!!.\xEA\"\"2\xEA3\xEB*) \".\xEC\"\"2\xEC3\xED+?$ &7\xB2,#&7\xB2\"+-%7\x98+#%'#%$## \"$\"# \"\"# \"*# \" %+\xFA$ &7\xB2,#&7\xB2\"+\xE8%!7I+E$ &7\xB2,#&7\xB2\"+3%7J*# \" %+#%'#%$## \"$\"# \"\"# \"*# \"7J+\xAB% &7\xB2,#&7\xB2\"+\x99% &7K,#&7K\"+\x87% &7\xB2,#&7\xB2\"+u%.n\"\"2n3o*) \".p\"\"2p3q+Y% &7\xB2,#&7\xB2\"+G%7S+=% &7\xB2,#&7\xB2\"++%4*6\xEE*$)'%!%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\xE9"),
          peg$decode("8!.\xE2\"\"2\xE23\xE3*) \".\xE4\"\"2\xE43\xE5+2$7N+(%4\"6\xF0\"! %$\"# \"\"# \"9*\" 3\xEF"),
          peg$decode("8!.\xD8\"\"2\xD83\xD9*) \".\xDA\"\"2\xDA3\xDB+2$7N+(%4\"6\xF0\"! %$\"# \"\"# \"9*\" 3\xF1"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x9F$.\xF3\"\"2\xF33\xF4*) \".\xF5\"\"2\xF53\xF6+\x83% &7\xB2,#&7\xB2\"+q%7\x98*\\ \"!.g\"\"2g3h*) \".i\"\"2i3j+?$ &7\xB2,#&7\xB2\"+-%7\x98+#%'#%$## \"$\"# \"\"# \"+(%4$6\xF7$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\xF2"),
          peg$decode("8!.\xF9\"\"2\xF93\xFA*) \".\xFB\"\"2\xFB3\xFC+D$ &7\xB2,#&7\xB2\"+2%7\x98+(%4#6\xFD#! %$## \"$\"# \"\"# \"9*\" 3\xF8"),
          peg$decode("8!7L+' 4!6r!! %*\x86 \"!.\xFF\"\"2\xFF3\u0100*) \".\u0101\"\"2\u01013\u0102+& 4!6\u0103! %*c \"!.g\"\"2g3h*) \".i\"\"2i3j+& 4!6\u0104! %*@ \"!.\u0105\"\"2\u01053\u0106*) \".\u0107\"\"2\u01073\u0108+& 4!6\u0109! %9*\" 3\xFE"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x88$.\xAA\"\"2\xAA3\xAB+x% &7\xB2,#&7\xB2\"+f%7P+\\% &7\xB2,#&7\xB2\"+J%.\xAC\"\"2\xAC3\xAD+:% &7\xB2,#&7\xB2\"+(%4'6\u010B'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u010A"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x88$.\xAA\"\"2\xAA3\xAB+x% &7\xB2,#&7\xB2\"+f%7P+\\% &7\xB2,#&7\xB2\"+J%.\xAC\"\"2\xAC3\xAD+:% &7\xB2,#&7\xB2\"+(%4'6\u010B'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u010C"),
          peg$decode("8!7R*# \" %+\x9D$ &!7Q+I$.\u010E\"\"2\u010E3\u010F*# \" %+3%7R*# \" %+#%'#%$## \"$\"# \"\"# \",T&!7Q+I$.\u010E\"\"2\u010E3\u010F*# \" %+3%7R*# \" %+#%'#%$## \"$\"# \"\"# \"\"+)%4\"6\u0110\"\"! %$\"# \"\"# \"9*\" 3\u010D"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\xD9$.\xF9\"\"2\xF93\xFA*) \".\xFB\"\"2\xFB3\xFC+\xBD% &7\xB2,#&7\xB2\"+\xAB%7}+\xA1% &7\xB2,#&7\xB2\"+\x8F%.\xAA\"\"2\xAA3\xAB+% &7\xB2,#&7\xB2\"+m%7R*# \" %+]% &7\xB2,#&7\xB2\"+K%.\xAC\"\"2\xAC3\xAD+;% &7\xB2,#&7\xB2\"+)%4+6\u0112+\"'#%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0111"),
          peg$decode("8!7c+~$! &7\xB2,#&7\xB2\"+U$.\u010E\"\"2\u010E3\u010F+E% &7\xB2,#&7\xB2\"+3%7R*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+)%4\"6\u0114\"\"! %$\"# \"\"# \"9*\" 3\u0113"),
          peg$decode("8!.\xAA\"\"2\xAA3\xAB+f$ &7\xB2,#&7\xB2\"+T%7(+J% &7\xB2,#&7\xB2\"+8%.\xAC\"\"2\xAC3\xAD+(%4%6\u0116%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"*w \"!.\xAA\"\"2\xAA3\xAB+f$ &7\xB2,#&7\xB2\"+T%7T+J% &7\xB2,#&7\xB2\"+8%.\xAC\"\"2\xAC3\xAD+(%4%6\u0116%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0115"),
          peg$decode("8!7U*# \" %+\xF7$ &7\xB2,#&7\xB2\"+\xE5% &!7V+m$ &7\xB2,#&7\xB2\"+[%.\u010E\"\"2\u010E3\u010F*# \" %+E% &7\xB2,#&7\xB2\"+3%7U*# \" %+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \",x&!7V+m$ &7\xB2,#&7\xB2\"+[%.\u010E\"\"2\u010E3\u010F*# \" %+E% &7\xB2,#&7\xB2\"+3%7U*# \" %+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4#6\u0118#\"\" %$## \"$\"# \"\"# \"9*\" 3\u0117"),
          peg$decode("8!7i+l$! &7\xB2,#&7\xB2\"+C$.\u010E\"\"2\u010E3\u010F+3%7U*# \" %+#%'#%$## \"$\"# \"\"# \"*# \" %+)%4\"6\u011A\"\"! %$\"# \"\"# \"9*\" 3\u0119"),
          peg$decode("87[*; \"7W*5 \"7Z*/ \"7X*) \"7Y*# \"7\\9*\" 3\u011B"),
          peg$decode("8! &7\xB2,#&7\xB2\"+`$.\u011D\"\"2\u011D3\u011E*) \".\u011F\"\"2\u011F3\u0120+D% &7\xB2,#&7\xB2\"+2%7S+(%4$6\u0121$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u011C"),
          peg$decode("8! &7\xB2,#&7\xB2\"+}$.\xF9\"\"2\xF93\xFA*) \".\xFB\"\"2\xFB3\xFC+a% &7\xB2,#&7\xB2\"+O%7}+E% &7\xB2,#&7\xB2\"+3%7S+)%4&6\u0123&\"\" %$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0122"),
          peg$decode("8!.\u0125\"\"2\u01253\u0126+=$7}+3%7S+)%4#6\u0127#\"! %$## \"$\"# \"\"# \"9*\" 3\u0124"),
          peg$decode("8!.\u0129\"\"2\u01293\u012A+2$7S+(%4\"6\u012B\"! %$\"# \"\"# \"9*\" 3\u0128"),
          peg$decode("8!7S+\xD1$ &! &7\xB2,#&7\xB2\"+[$.\u012D\"\"2\u012D3\u012E*) \".\u012F\"\"2\u012F3\u0130+?% &7\xB2,#&7\xB2\"+-%7S+#%'$%$$# \"$## \"$\"# \"\"# \",n&! &7\xB2,#&7\xB2\"+[$.\u012D\"\"2\u012D3\u012E*) \".\u012F\"\"2\u012F3\u0130+?% &7\xB2,#&7\xB2\"+-%7S+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u0131\"\"! %$\"# \"\"# \"9*\" 3\u012C"),
          peg$decode("8! &7\xB2,#&7\xB2\"+`$.\u0133\"\"2\u01333\u0134*) \".\u0135\"\"2\u01353\u0136+D% &7\xB2,#&7\xB2\"+2%7]+(%4$6\u0137$! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0132"),
          peg$decode("87\x8A*) \"7\x8B*# \"7^9*\" 3\u0138"),
          peg$decode("8!7\x98+3$7_+)%4\"6\u013A\"\"! %$\"# \"\"# \"9*\" 3\u0139"),
          peg$decode("8!7\xB1+& 4!6\u013C! %*\xBF \"!.D\"\"2D3E+\xAE$.<\"\"2<3=*) \".>\"\"2>3?*# \" %+\x8C%7\x80+\x82% &!.\u013D\"\"2\u013D3\u013E+-$7\x80+#%'\"%$\"# \"\"# \",>&!.\u013D\"\"2\u013D3\u013E+-$7\x80+#%'\"%$\"# \"\"# \"\"+:%.J\"\"2J3K+*%4%6\u013F%##\"!%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u013B"),
          peg$decode("8!7\xB1+& 4!6\u013C! %*\x9C \"!.D\"\"2D3E+\x8B$7\x80+\x81% &!.\u013D\"\"2\u013D3\u013E+-$7\x80+#%'\"%$\"# \"\"# \",>&!.\u013D\"\"2\u013D3\u013E+-$7\x80+#%'\"%$\"# \"\"# \"\"+9%.J\"\"2J3K+)%4$6\u0141$\"\"!%$$# \"$## \"$\"# \"\"# \"9*\" 3\u0140"),
          peg$decode("8!.\xAA\"\"2\xAA3\xAB+l$ &7\xB2,#&7\xB2\"+Z%7b*# \" %+J% &7\xB2,#&7\xB2\"+8%.\xAC\"\"2\xAC3\xAD+(%4%6\u0143%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0142"),
          peg$decode("8!7c+~$! &7\xB2,#&7\xB2\"+U$.\u010E\"\"2\u010E3\u010F+E% &7\xB2,#&7\xB2\"+3%7b*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+)%4\"6\u0114\"\"! %$\"# \"\"# \"9*\" 3\u0144"),
          peg$decode("8! &7\xB2,#&7\xB2\"+O$7|+E% &7\xB2,#&7\xB2\"+3%7d+)%4$6\u0146$\"\" %$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$7x+E% &7\xB2,#&7\xB2\"+3%7e+)%4$6\u0147$\"\" %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0145"),
          peg$decode("8!7h+\u0130$ &7\xB2,#&7\xB2\"+\u011E%7f+\u0114% &! &7\xB2,#&7\xB2\"+|$.\xB3\"\"2\xB33\xB4+l% &7\xB2,#&7\xB2\"+Z%!7h+?$ &7\xB2,#&7\xB2\"+-%7f+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \",\x8F&! &7\xB2,#&7\xB2\"+|$.\xB3\"\"2\xB33\xB4+l% &7\xB2,#&7\xB2\"+Z%!7h+?$ &7\xB2,#&7\xB2\"+-%7f+#%'#%$## \"$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"\"+*%4$6\u0149$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0148"),
          peg$decode("87d*# \" %9*\" 3\u014A"),
          peg$decode("8!7g+\xA7$ &7\xB2,#&7\xB2\"+\x95% &!.\u013D\"\"2\u013D3\u013E+?$ &7\xB2,#&7\xB2\"+-%7g+#%'#%$## \"$\"# \"\"# \",P&!.\u013D\"\"2\u013D3\u013E+?$ &7\xB2,#&7\xB2\"+-%7g+#%'#%$## \"$\"# \"\"# \"\"+)%4#6\u014C#\"\" %$## \"$\"# \"\"# \"9*\" 3\u014B"),
          peg$decode("87{9*\" 3\u014D"),
          peg$decode("87}*4 \"!.\u014F\"\"2\u014F3\u0150+& 4!6\u0151! %9*\" 3\u014E"),
          peg$decode("8! &7\xB2,#&7\xB2\"+O$7|+E% &7\xB2,#&7\xB2\"+3%7j+)%4$6\u0146$\"\" %$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$7x+E% &7\xB2,#&7\xB2\"+3%7k+)%4$6\u0153$\"\" %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0152"),
          peg$decode("8!7l*# \"7m+\u0118$ &7\xB2,#&7\xB2\"+\u0106%7f+\xFC% &! &7\xB2,#&7\xB2\"+p$.\xB3\"\"2\xB33\xB4+`% &7\xB2,#&7\xB2\"+N%!7l*# \"7m+-$7f+#%'\"%$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \",\x83&! &7\xB2,#&7\xB2\"+p$.\xB3\"\"2\xB33\xB4+`% &7\xB2,#&7\xB2\"+N%!7l*# \"7m+-$7f+#%'\"%$\"# \"\"# \"*# \" %+#%'$%$$# \"$## \"$\"# \"\"# \"\"+*%4$6\u0155$##! %$$# \"$## \"$\"# \"\"# \"9*\" 3\u0154"),
          peg$decode("87d*# \" %9*\" 3\u0156"),
          peg$decode("8!7n+' 4!6\u0158!! %9*\" 3\u0157"),
          peg$decode("87~9*\" 3\u0159"),
          peg$decode("87o9*\" 3\u015A"),
          peg$decode("8!7p+q$ &!.\u015C\"\"2\u015C3\u015D+-$7p+#%'\"%$\"# \"\"# \",>&!.\u015C\"\"2\u015C3\u015D+-$7p+#%'\"%$\"# \"\"# \"\"+)%4\"6\u015E\"\"! %$\"# \"\"# \"9*\" 3\u015B"),
          peg$decode("8!7r+q$ &!.\u0160\"\"2\u01603\u0161+-$7r+#%'\"%$\"# \"\"# \",>&!.\u0160\"\"2\u01603\u0161+-$7r+#%'\"%$\"# \"\"# \"\"+)%4\"6\u0162\"\"! %$\"# \"\"# \"9*\" 3\u015F"),
          peg$decode("8!7t+9$7s*# \" %+)%4\"6\u0164\"\"! %$\"# \"\"# \"9*\" 3\u0163"),
          peg$decode("87q*C \"!.\u0166\"\"2\u01663\u0167+2$7q+(%4\"6\u0168\"! %$\"# \"\"# \"9*\" 3\u0165"),
          peg$decode("8.L\"\"2L3M*\xEA \".\u016A\"\"2\u016A3\u016B*\xDE \".\u016C\"\"2\u016C3\u016D*\xD2 \"!.\xAA\"\"2\xAA3\xAB+\xC1$!7w+{$!.\u013D\"\"2\u013D3\u013E+T$.\xAC\"\"2\xAC3\xAD*> \"!7w+3$.\xAC\"\"2\xAC3\xAD+#%'\"%$\"# \"\"# \"+#%'\"%$\"# \"\"# \"*) \".\xAC\"\"2\xAC3\xAD+#%'\"%$\"# \"\"# \"*N \"!.\u013D\"\"2\u013D3\u013E+=$7w+3%.\xAC\"\"2\xAC3\xAD+#%'#%$## \"$\"# \"\"# \"+#%'\"%$\"# \"\"# \"9*\" 3\u0169"),
          peg$decode("87\x98*\x8B \"!.\u014F\"\"2\u014F3\u0150+& 4!6\u0151! %*t \"!.\u016F\"\"2\u016F3\u0170+-$7u+#%'\"%$\"# \"\"# \"*S \"!.D\"\"2D3E+B$7n+8%.J\"\"2J3K+(%4#6\u0116#!!%$## \"$\"# \"\"# \"9*\" 3\u016E"),
          peg$decode("7v*\xA7 \"!.D\"\"2D3E+\x96$!7v+k$ &!.\u015C\"\"2\u015C3\u015D+-$7v+#%'\"%$\"# \"\"# \",>&!.\u015C\"\"2\u015C3\u015D+-$7v+#%'\"%$\"# \"\"# \"\"+#%'\"%$\"# \"\"# \"*# \" %+3%.J\"\"2J3K+#%'#%$## \"$\"# \"\"# \""),
          peg$decode("87\x98*V \".\u014F\"\"2\u014F3\u0150*J \"!.\u0166\"\"2\u01663\u0167+9$7\x98*) \".\u014F\"\"2\u014F3\u0150+#%'\"%$\"# \"\"# \"9*\" 3\u0171"),
          peg$decode("87\xA29*\" 3\u0172"),
          peg$decode("8!7z+' 4!6\u0174!! %*# \"7y9*\" 3\u0173"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x88$.\u0176\"\"2\u01763\u0177+x% &7\xB2,#&7\xB2\"+f%7d+\\% &7\xB2,#&7\xB2\"+J%.\u0178\"\"2\u01783\u0179+:% &7\xB2,#&7\xB2\"+(%4'6\u017A'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0175"),
          peg$decode("8! &7\xB2,#&7\xB2\"+\x97$.D\"\"2D3E+\x87% &7\xB2,#&7\xB2\"+u% &7{+&$,#&7{\"\"\" \"+\\% &7\xB2,#&7\xB2\"+J%.J\"\"2J3K+:% &7\xB2,#&7\xB2\"+(%4'6\u017C'!#%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u017B"),
          peg$decode("8!! &7\xB2,#&7\xB2\"+?$7|+5% &7\xB2,#&7\xB2\"+#%'#%$## \"$\"# \"\"# \"*R \"! &7\xB2,#&7\xB2\"+?$7x+5% &7\xB2,#&7\xB2\"+#%'#%$## \"$\"# \"\"# \"+' 4!6\u017E!! %9*\" 3\u017D"),
          peg$decode("87~*# \"79*\" 3\u017F"),
          peg$decode("87~*# \"7\x989*\" 3\u0180"),
          peg$decode("8!7\x9F*# \"7\xA0+' 4!6\u0182!! %9*\" 3\u0181"),
          peg$decode("87\x98*; \"7\x91*5 \"7\x92*/ \"7\x96*) \"7\x9A*# \"7\xB19*\" 3\u0183"),
          peg$decode("87\x819*\" 3\u0184"),
          peg$decode("8!7\x82+\xB9$ &! &7\xB2,#&7\xB2\"+O$.\u0186\"\"2\u01863\u0187+?% &7\xB2,#&7\xB2\"+-%7\x82+#%'$%$$# \"$## \"$\"# \"\"# \",b&! &7\xB2,#&7\xB2\"+O$.\u0186\"\"2\u01863\u0187+?% &7\xB2,#&7\xB2\"+-%7\x82+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u0188\"\"! %$\"# \"\"# \"9*\" 3\u0185"),
          peg$decode("8!7\x83+\xB9$ &! &7\xB2,#&7\xB2\"+O$.\u018A\"\"2\u018A3\u018B+?% &7\xB2,#&7\xB2\"+-%7\x83+#%'$%$$# \"$## \"$\"# \"\"# \",b&! &7\xB2,#&7\xB2\"+O$.\u018A\"\"2\u018A3\u018B+?% &7\xB2,#&7\xB2\"+-%7\x83+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u018C\"\"! %$\"# \"\"# \"9*\" 3\u0189"),
          peg$decode("87\x849*\" 3\u018D"),
          peg$decode("8!7\x85+\u05EB$ &! &7\xB2,#&7\xB2\"+O$.\u018F\"\"2\u018F3\u0190+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u02B6 \"! &7\xB2,#&7\xB2\"+O$.\u0191\"\"2\u01913\u0192+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u0271 \"! &7\xB2,#&7\xB2\"+O$.\u0193\"\"2\u01933\u0194+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u022C \"! &7\xB2,#&7\xB2\"+O$.\u0195\"\"2\u01953\u0196+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01E7 \"! &7\xB2,#&7\xB2\"+O$.\u0197\"\"2\u01973\u0198+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01A2 \"! &7\xB2,#&7\xB2\"+O$.\u0199\"\"2\u01993\u019A+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u015D \"! &7\xB2,#&7\xB2\"+w$.\u019B\"\"2\u019B3\u019C*) \".\u019D\"\"2\u019D3\u019E+[%.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+?% &7\xB2,#&7\xB2\"+-%7`+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*\xF0 \"! &7\xB2,#&7\xB2\"+\xDD$.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+\xC1%.\u01A3\"\"2\u01A33\u01A4*) \".\u01A5\"\"2\u01A53\u01A6+\xA5%.\u01A7\"\"2\u01A73\u01A8*) \".\u01A9\"\"2\u01A93\u01AA+\x89% &7\xB2,#&7\xB2\"+w%.\u019B\"\"2\u019B3\u019C*) \".\u019D\"\"2\u019D3\u019E+[%.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+?% &7\xB2,#&7\xB2\"+-%7`+#%')%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \",\u02FB&! &7\xB2,#&7\xB2\"+O$.\u018F\"\"2\u018F3\u0190+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u02B6 \"! &7\xB2,#&7\xB2\"+O$.\u0191\"\"2\u01913\u0192+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u0271 \"! &7\xB2,#&7\xB2\"+O$.\u0193\"\"2\u01933\u0194+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u022C \"! &7\xB2,#&7\xB2\"+O$.\u0195\"\"2\u01953\u0196+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01E7 \"! &7\xB2,#&7\xB2\"+O$.\u0197\"\"2\u01973\u0198+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u01A2 \"! &7\xB2,#&7\xB2\"+O$.\u0199\"\"2\u01993\u019A+?% &7\xB2,#&7\xB2\"+-%7\x85+#%'$%$$# \"$## \"$\"# \"\"# \"*\u015D \"! &7\xB2,#&7\xB2\"+w$.\u019B\"\"2\u019B3\u019C*) \".\u019D\"\"2\u019D3\u019E+[%.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+?% &7\xB2,#&7\xB2\"+-%7`+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*\xF0 \"! &7\xB2,#&7\xB2\"+\xDD$.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+\xC1%.\u01A3\"\"2\u01A33\u01A4*) \".\u01A5\"\"2\u01A53\u01A6+\xA5%.\u01A7\"\"2\u01A73\u01A8*) \".\u01A9\"\"2\u01A93\u01AA+\x89% &7\xB2,#&7\xB2\"+w%.\u019B\"\"2\u019B3\u019C*) \".\u019D\"\"2\u019D3\u019E+[%.\u019F\"\"2\u019F3\u01A0*) \".\u01A1\"\"2\u01A13\u01A2+?% &7\xB2,#&7\xB2\"+-%7`+#%')%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01AB\"\"! %$\"# \"\"# \"9*\" 3\u018E"),
          peg$decode("87\x869*\" 3\u01AC"),
          peg$decode("8!7\x87+\u0299$ &! &7\xB2,#&7\xB2\"+O$.\u016C\"\"2\u016C3\u016D+?% &7\xB2,#&7\xB2\"+-%7\x87+#%'$%$$# \"$## \"$\"# \"\"# \"*\u010D \"! &7\xB2,#&7\xB2\"+O$.\u01AE\"\"2\u01AE3\u01AF+?% &7\xB2,#&7\xB2\"+-%7\x87+#%'$%$$# \"$## \"$\"# \"\"# \"*\xC8 \"!7\x95*# \"7\x95+\xB7$! &7\xB2,#&7\xB2\"+O$.L\"\"2L3M+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$.\u0160\"\"2\u01603\u0161+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+#%'\"%$\"# \"\"# \",\u0152&! &7\xB2,#&7\xB2\"+O$.\u016C\"\"2\u016C3\u016D+?% &7\xB2,#&7\xB2\"+-%7\x87+#%'$%$$# \"$## \"$\"# \"\"# \"*\u010D \"! &7\xB2,#&7\xB2\"+O$.\u01AE\"\"2\u01AE3\u01AF+?% &7\xB2,#&7\xB2\"+-%7\x87+#%'$%$$# \"$## \"$\"# \"\"# \"*\xC8 \"!7\x95*# \"7\x95+\xB7$! &7\xB2,#&7\xB2\"+O$.L\"\"2L3M+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$.\u0160\"\"2\u01603\u0161+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*# \" %+#%'\"%$\"# \"\"# \"\"+)%4\"6\u01B0\"\"! %$\"# \"\"# \"9*\" 3\u01AD"),
          peg$decode("8!7\x88+\u0143$ &! &7\xB2,#&7\xB2\"+O$.L\"\"2L3M+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$.\u0160\"\"2\u01603\u0161+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \",\xA7&! &7\xB2,#&7\xB2\"+O$.L\"\"2L3M+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"*b \"! &7\xB2,#&7\xB2\"+O$.\u0160\"\"2\u01603\u0161+?% &7\xB2,#&7\xB2\"+-%7\x88+#%'$%$$# \"$## \"$\"# \"\"# \"\"+)%4\"6\u01B2\"\"! %$\"# \"\"# \"9*\" 3\u01B1"),
          peg$decode("8!.\u016F\"\"2\u016F3\u0170+D$ &7\xB2,#&7\xB2\"+2%7\x89+(%4#6\u01B4#! %$## \"$\"# \"\"# \"*\x93 \"!.\u016C\"\"2\u016C3\u016D+D$ &7\xB2,#&7\xB2\"+2%7\x89+(%4#6\u01B5#! %$## \"$\"# \"\"# \"*[ \"!.\u01AE\"\"2\u01AE3\u01AF+D$ &7\xB2,#&7\xB2\"+2%7\x89+(%4#6\u01B6#! %$## \"$\"# \"\"# \"*# \"7\x899*\" 3\u01B3"),
          peg$decode("87\x8A*w \"7\x8B*q \"7\x90*k \"!7\x91+' 4!6\u01B8!! %*Y \"!7\x92+' 4!6\u01B9!! %*G \"!7\x96+' 4!6\u01BA!! %*5 \"7\x8F*/ \"!7~+' 4!6\u01BB!! %9*\" 3\u01B7"),
          peg$decode("8!.D\"\"2D3E+f$ &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4%6\u01BD%!\"%$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u01BC"),
          peg$decode("8!.\u01BF\"\"2\u01BF3\u01C0*) \".\u01C1\"\"2\u01C13\u01C2+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01C3'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0913 \"!.\u01C4\"\"2\u01C43\u01C5*) \".\u01C6\"\"2\u01C63\u01C7+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01C8'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u088B \"!.\u01C9\"\"2\u01C93\u01CA*) \".\u01CB\"\"2\u01CB3\u01CC+\xC7$ &7\xB2,#&7\xB2\"+\xB5%.D\"\"2D3E+\xA5% &7\xB2,#&7\xB2\"+\x93%7\x80+\x89% &7\xB2,#&7\xB2\"+w%.\u013D\"\"2\u013D3\u013E+g% &7\xB2,#&7\xB2\"+U%7\x80+K% &7\xB2,#&7\xB2\"+9%.J\"\"2J3K+)%4+6\u01CD+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u07C4 \"!.\u01CE\"\"2\u01CE3\u01CF*) \".\u01D0\"\"2\u01D03\u01D1+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01D2'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u073C \"!.\u01D3\"\"2\u01D33\u01D4*) \".\u01D5\"\"2\u01D53\u01D6+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7~+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01D7'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u06B4 \"!.\u01D8\"\"2\u01D83\u01D9*) \".\u01DA\"\"2\u01DA3\u01DB+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01DC'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u062C \"!.\u01DD\"\"2\u01DD3\u01DE*) \".\u01DF\"\"2\u01DF3\u01E0+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01E1'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u05A4 \"!.\u01E2\"\"2\u01E23\u01E3*) \".\u01E4\"\"2\u01E43\u01E5+\x99$ &7\xB2,#&7\xB2\"+\x87%!.D\"\"2D3E+a$ &7\xB2,#&7\xB2\"+O%7\x80+E% &7\xB2,#&7\xB2\"+3%.J\"\"2J3K+#%'%%$%# \"$$# \"$## \"$\"# \"\"# \"*# \"7\xB1+(%4#6\u01E6#! %$## \"$\"# \"\"# \"*\u050B \"!.\u01E7\"\"2\u01E73\u01E8*) \".\u01E9\"\"2\u01E93\u01EA+D$ &7\xB2,#&7\xB2\"+2%7`+(%4#6\u01EB#! %$## \"$\"# \"\"# \"*\u04C7 \"!.\u01EC\"\"2\u01EC3\u01ED*) \".\u01EE\"\"2\u01EE3\u01EF+\u0106$ &7\xB2,#&7\xB2\"+\xF4%.D\"\"2D3E+\xE4% &7\xB2,#&7\xB2\"+\xD2%7\x80+\xC8% &7\xB2,#&7\xB2\"+\xB6%.\u013D\"\"2\u013D3\u013E+\xA6% &7\xB2,#&7\xB2\"+\x94%7\x80+\x8A% &7\xB2,#&7\xB2\"+x%.\u013D\"\"2\u013D3\u013E+h% &7\xB2,#&7\xB2\"+V%7\x80+L% &7\xB2,#&7\xB2\"+:%.J\"\"2J3K+*%4/6\u01F0/#*&\"%$/# \"$.# \"$-# \"$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u03C1 \"!.\u01F1\"\"2\u01F13\u01F2*) \".\u01F3\"\"2\u01F33\u01F4+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01F5'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0339 \"!.\u01F6\"\"2\u01F63\u01F7*) \".\u01F8\"\"2\u01F83\u01F9+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u01FA'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u02B1 \"!.\u01FB\"\"2\u01FB3\u01FC*) \".\u01FD\"\"2\u01FD3\u01FE+\xC7$ &7\xB2,#&7\xB2\"+\xB5%.D\"\"2D3E+\xA5% &7\xB2,#&7\xB2\"+\x93%7\x80+\x89% &7\xB2,#&7\xB2\"+w%.\u013D\"\"2\u013D3\u013E+g% &7\xB2,#&7\xB2\"+U%7\x80+K% &7\xB2,#&7\xB2\"+9%.J\"\"2J3K+)%4+6\u01FF+\"&\"%$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u01EA \"!.\u0200\"\"2\u02003\u0201*A \".\u0202\"\"2\u02023\u0203*5 \".\u0204\"\"2\u02043\u0205*) \".\u0206\"\"2\u02063\u0207+\x88$ &7\xB2,#&7\xB2\"+v%.D\"\"2D3E+f% &7\xB2,#&7\xB2\"+T%7\x80+J% &7\xB2,#&7\xB2\"+8%.J\"\"2J3K+(%4'6\u0208'!\"%$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u014A \"!.\u0209\"\"2\u02093\u020A*) \".\u020B\"\"2\u020B3\u020C+\u011B$ &0\u020D\"\"1!3\u020E+,$,)&0\u020D\"\"1!3\u020E\"\"\" \"+\xF6% &7\xB2,#&7\xB2\"+\xE4%.D\"\"2D3E+\xD4% &! &7\xB2,#&7\xB2\"+=$7\x80+3%.\u013D\"\"2\u013D3\u013E+#%'#%$## \"$\"# \"\"# \",P&! &7\xB2,#&7\xB2\"+=$7\x80+3%.\u013D\"\"2\u013D3\u013E+#%'#%$## \"$\"# \"\"# \"\"+h% &7\xB2,#&7\xB2\"+V%7\x80+L% &7\xB2,#&7\xB2\"+:%.J\"\"2J3K+*%4)6\u020F)#'$\"%$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*/ \"7\x8C*) \"7\x8D*# \"7\x8E9*\" 3\u01BE"),
          peg$decode("8!.\u0211\"\"2\u02113\u0212*) \".\u0213\"\"2\u02133\u0214+\u0117$ &7\xB2,#&7\xB2\"+\u0105%.D\"\"2D3E+\xF5% &7\xB2,#&7\xB2\"+\xE3%7\x80+\xD9% &7\xB2,#&7\xB2\"+\xC7%.\u013D\"\"2\u013D3\u013E+\xB7% &7\xB2,#&7\xB2\"+\xA5%7\x80+\x9B% &7\xB2,#&7\xB2\"+\x89%!.\u013D\"\"2\u013D3\u013E+?$ &7\xB2,#&7\xB2\"+-%7\x80+#%'#%$## \"$\"# \"\"# \"*# \" %+L% &7\xB2,#&7\xB2\"+:%.J\"\"2J3K+*%4-6\u0215-#($\"%$-# \"$,# \"$+# \"$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0210"),
          peg$decode("8!.\u0217\"\"2\u02173\u0218*) \".\u0219\"\"2\u02193\u021A+D$ &7\xB2,#&7\xB2\"+2%7S+(%4#6\u021B#! %$## \"$\"# \"\"# \"9*\" 3\u0216"),
          peg$decode("8!.\u021D\"\"2\u021D3\u021E*) \".\u021F\"\"2\u021F3\u0220+r$ &7\xB2,#&7\xB2\"+`%.\u0217\"\"2\u02173\u0218*) \".\u0219\"\"2\u02193\u021A+D% &7\xB2,#&7\xB2\"+2%7S+(%4%6\u0221%! %$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u021C"),
          peg$decode("8!.\u0223\"\"2\u02233\u0224*) \".\u0225\"\"2\u02253\u0226+\xDB$ &7\xB2,#&7\xB2\"+\xC9%.D\"\"2D3E+\xB9% &7\xB2,#&7\xB2\"+\xA7%.<\"\"2<3=*) \".>\"\"2>3?*# \" %+\x85% &7\xB2,#&7\xB2\"+s%.L\"\"2L3M*# \"7\x80+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4*6\u0227*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u0359 \"!.\u0228\"\"2\u02283\u0229*) \".\u022A\"\"2\u022A3\u022B+\xCF$ &7\xB2,#&7\xB2\"+\xBD%.D\"\"2D3E+\xAD% &7\xB2,#&7\xB2\"+\x9B%.<\"\"2<3=*) \".>\"\"2>3?*# \" %+y% &7\xB2,#&7\xB2\"+g%7\x80+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4*6\u022C*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u028A \"!.\u022D\"\"2\u022D3\u022E*) \".\u022F\"\"2\u022F3\u0230+\xCF$ &7\xB2,#&7\xB2\"+\xBD%.D\"\"2D3E+\xAD% &7\xB2,#&7\xB2\"+\x9B%.<\"\"2<3=*) \".>\"\"2>3?*# \" %+y% &7\xB2,#&7\xB2\"+g%7\x80+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4*6\u0231*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\u01BB \"!.\u0232\"\"2\u02323\u0233*) \".\u0234\"\"2\u02343\u0235+\xCF$ &7\xB2,#&7\xB2\"+\xBD%.D\"\"2D3E+\xAD% &7\xB2,#&7\xB2\"+\x9B%.<\"\"2<3=*) \".>\"\"2>3?*# \" %+y% &7\xB2,#&7\xB2\"+g%7\x80+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4*6\u0236*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"*\xEC \"!.\u0237\"\"2\u02373\u0238*) \".\u0239\"\"2\u02393\u023A+\xCF$ &7\xB2,#&7\xB2\"+\xBD%.D\"\"2D3E+\xAD% &7\xB2,#&7\xB2\"+\x9B%.<\"\"2<3=*) \".>\"\"2>3?*# \" %+y% &7\xB2,#&7\xB2\"+g%7\x80+]% &7\xB2,#&7\xB2\"+K%.J\"\"2J3K+;% &7\xB2,#&7\xB2\"+)%4*6\u023B*\"%#%$*# \"$)# \"$(# \"$'# \"$&# \"$%# \"$$# \"$## \"$\"# \"\"# \"9*\" 3\u0222"),
          peg$decode("8!7\x98+9$7_*# \" %+)%4\"6\u023D\"\"! %$\"# \"\"# \"9*\" 3\u023C"),
          peg$decode("8!7\x97+Z$7\xA1*> \"!.\u023F\"\"2\u023F3\u0240+-$7\x98+#%'\"%$\"# \"\"# \"*# \" %+)%4\"6\u0241\"\"! %$\"# \"\"# \"9*\" 3\u023E"),
          peg$decode("87\x93*) \"7\x94*# \"7\x959*\" 3\u0242"),
          peg$decode("87\xA4*) \"7\xA3*# \"7\xA29*\" 3\u0243"),
          peg$decode("87\xA7*) \"7\xA6*# \"7\xA59*\" 3\u0244"),
          peg$decode("87\xAA*) \"7\xA9*# \"7\xA89*\" 3\u0245"),
          peg$decode("8!.\u0247\"\"2\u02473\u0248*) \".\u0249\"\"2\u02493\u024A+& 4!6\u024B! %*@ \"!.\u024C\"\"2\u024C3\u024D*) \".\u024E\"\"2\u024E3\u024F+& 4!6\u0250! %9*\" 3\u0246"),
          peg$decode("8!7\xAE+' 4!6\u0252!! %*S \"!7\xAF+' 4!6\u0252!! %*A \"!7\xAC+' 4!6\u0252!! %*/ \"!7\xAD+' 4!6\u0252!! %9*\" 3\u0251"),
          peg$decode("8!7\x9B+' 4!6\u0254!! %*/ \"!7\x99+' 4!6\u0255!! %9*\" 3\u0253"),
          peg$decode("8!7\x9D+' 4!6\u0257!! %*/ \"!7\x9C+' 4!6\u0258!! %9*\" 3\u0256"),
          peg$decode("8!7\x9E+' 4!6\u025A!! %*. \"!7\xB4+& 4!6\u025B! %9*\" 3\u0259"),
          peg$decode("8!.\u0193\"\"2\u01933\u0194+V$ &0\u025D\"\"1!3\u025E,)&0\u025D\"\"1!3\u025E\"+8%.\u0195\"\"2\u01953\u0196+(%4#6\u025F#!!%$## \"$\"# \"\"# \"9*\" 3\u025C"),
          peg$decode("8!7\xB9*# \" %+8$.\u0261\"\"2\u02613\u0262+(%4\"6\u0255\"!!%$\"# \"\"# \"9*\" 3\u0260"),
          peg$decode("8!7\x9C+3$7\xBA+)%4\"6\u0264\"\"! %$\"# \"\"# \"9*\" 3\u0263"),
          peg$decode("8!.\u0266\"\"2\u02663\u0267+2$7\xBA+(%4\"6\u0268\"! %$\"# \"\"# \"9*\" 3\u0265"),
          peg$decode("8!.\u016A\"\"2\u016A3\u016B+2$7\xB7+(%4\"6\u026A\"! %$\"# \"\"# \"9*\" 3\u0269"),
          peg$decode("8!.\u026C\"\"2\u026C3\u026D+2$7\xB7+(%4\"6\u026A\"! %$\"# \"\"# \"9*\" 3\u026B"),
          peg$decode("8!.\u026F\"\"2\u026F3\u0270+\xCC$ &0\u0271\"\"1!3\u0272+,$,)&0\u0271\"\"1!3\u0272\"\"\" \"+\xA7% &!.\u01AE\"\"2\u01AE3\u01AF+H$ &0\u0273\"\"1!3\u0274+,$,)&0\u0273\"\"1!3\u0274\"\"\" \"+#%'\"%$\"# \"\"# \",Y&!.\u01AE\"\"2\u01AE3\u01AF+H$ &0\u0273\"\"1!3\u0274+,$,)&0\u0273\"\"1!3\u0274\"\"\" \"+#%'\"%$\"# \"\"# \"\"+)%4#6\u0275#\"! %$## \"$\"# \"\"# \"9*\" 3\u026E"),
          peg$decode("8! &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+' 4!6\u0279!! %9*\" 3\u0276"),
          peg$decode("8! &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+X$.\u010E\"\"2\u010E3\u010F+H% &0\u0277\"\"1!3\u0278,)&0\u0277\"\"1!3\u0278\"+*%4#6\u027B##\"! %$## \"$\"# \"\"# \"*_ \"!.\u010E\"\"2\u010E3\u010F+N$ &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+)%4\"6\u027C\"\"! %$\"# \"\"# \"9*\" 3\u027A"),
          peg$decode("8! &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+c$.\u010E\"\"2\u010E3\u010F+S% &0\u0277\"\"1!3\u0278,)&0\u0277\"\"1!3\u0278\"+5%7\xAB++%4$6\u027E$$#\"! %$$# \"$## \"$\"# \"\"# \"*\xA6 \"!.\u010E\"\"2\u010E3\u010F+Y$ &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+4%7\xAB+*%4#6\u027F##\"! %$## \"$\"# \"\"# \"*Y \"! &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+3$7\xAB+)%4\"6\u0280\"\"! %$\"# \"\"# \"9*\" 3\u027D"),
          peg$decode("8!.\u016C\"\"2\u016C3\u016D+2$7\xA2+(%4\"6\u0282\"! %$\"# \"\"# \"9*\" 3\u0281"),
          peg$decode("8!.\u016C\"\"2\u016C3\u016D+2$7\xA3+(%4\"6\u0284\"! %$\"# \"\"# \"9*\" 3\u0283"),
          peg$decode("8!.\u016C\"\"2\u016C3\u016D+2$7\xA4+(%4\"6\u0284\"! %$\"# \"\"# \"9*\" 3\u0285"),
          peg$decode("8!.\u01AE\"\"2\u01AE3\u01AF+2$7\xA2+(%4\"6\u0287\"! %$\"# \"\"# \"9*\" 3\u0286"),
          peg$decode("8!.\u01AE\"\"2\u01AE3\u01AF+2$7\xA3+(%4\"6\u0287\"! %$\"# \"\"# \"9*\" 3\u0288"),
          peg$decode("8!.\u01AE\"\"2\u01AE3\u01AF+2$7\xA4+(%4\"6\u0287\"! %$\"# \"\"# \"9*\" 3\u0289"),
          peg$decode("8!0\u028B\"\"1!3\u028C+e$0\u028D\"\"1!3\u028E*# \" %+O% &0\u0277\"\"1!3\u0278+,$,)&0\u0277\"\"1!3\u0278\"\"\" \"+*%4#6\u028F##\"! %$## \"$\"# \"\"# \"9*\" 3\u028A"),
          peg$decode("8!.\u0291\"\"2\u02913\u0292+b$ &0\u0293\"\"1!3\u0294*# \"7\xB0,/&0\u0293\"\"1!3\u0294*# \"7\xB0\"+8%.\u0291\"\"2\u02913\u0292+(%4#6\u0295#!!%$## \"$\"# \"\"# \"9*\" 3\u0290"),
          peg$decode("8!.\u0297\"\"2\u02973\u0298+b$ &0\u0299\"\"1!3\u029A*# \"7\xB0,/&0\u0299\"\"1!3\u029A*# \"7\xB0\"+8%.\u0297\"\"2\u02973\u0298+(%4#6\u0295#!!%$## \"$\"# \"\"# \"9*\" 3\u0296"),
          peg$decode("8!.\u029C\"\"2\u029C3\u029D+b$ &0\u029E\"\"1!3\u029F*# \"7\xB0,/&0\u029E\"\"1!3\u029F*# \"7\xB0\"+8%.\u029C\"\"2\u029C3\u029D+(%4#6\u0295#!!%$## \"$\"# \"\"# \"9*\" 3\u029B"),
          peg$decode("8!.\u02A1\"\"2\u02A13\u02A2+b$ &0\u02A3\"\"1!3\u02A4*# \"7\xB0,/&0\u02A3\"\"1!3\u02A4*# \"7\xB0\"+8%.\u02A1\"\"2\u02A13\u02A2+(%4#6\u0295#!!%$## \"$\"# \"\"# \"9*\" 3\u02A0"),
          peg$decode("8!.\u02A6\"\"2\u02A63\u02A7+3$0\u02A8\"\"1!3\u02A9+#%'\"%$\"# \"\"# \"9*\" 3\u02A5"),
          peg$decode("8!.D\"\"2D3E+I$ &7\xB2,#&7\xB2\"+7%.J\"\"2J3K+'%4#6\u02AB# %$## \"$\"# \"\"# \"9*\" 3\u02AA"),
          peg$decode("80\u02AD\"\"1!3\u02AE*G \"0\u02AF\"\"1!3\u02B0*; \"0\u02B1\"\"1!3\u02B2*/ \"0\u02B3\"\"1!3\u02B4*# \"7\xB39*\" 3\u02AC"),
          peg$decode("8!.\u02B6\"\"2\u02B63\u02B7+A$ &0\u02B8\"\"1!3\u02B9,)&0\u02B8\"\"1!3\u02B9\"+#%'\"%$\"# \"\"# \"9*\" 3\u02B5"),
          peg$decode("8!.\u0176\"\"2\u01763\u0177+E$ &7\xB2,#&7\xB2\"+3%.\u0178\"\"2\u01783\u0179+#%'#%$## \"$\"# \"\"# \"9*\" 3\u02BA"),
          peg$decode("80\u02BC\"\"1!3\u02BD*\xB9 \"0\u02BE\"\"1!3\u02BF*\xAD \"0\u02C0\"\"1!3\u02C1*\xA1 \"0\u02C2\"\"1!3\u02C3*\x95 \"0\u02C4\"\"1!3\u02C5*\x89 \"0\u02C6\"\"1!3\u02C7*} \"0\u02C8\"\"1!3\u02C9*q \"0\u02CA\"\"1!3\u02CB*e \"0\u02CC\"\"1!3\u02CD*Y \"0\u02CE\"\"1!3\u02CF*M \"0\u02D0\"\"1!3\u02D1*A \"0\u02D2\"\"1!3\u02D3*5 \"0\u02D4\"\"1!3\u02D5*) \"0\u02D6\"\"1!3\u02D79*\" 3\u02BB"),
          peg$decode("87\xB5*) \".\u02D9\"\"2\u02D93\u02DA9*\" 3\u02D8"),
          peg$decode("8!7\xB6*) \"0\u0277\"\"1!3\u0278+\x9B$ &7\xB6*M \"0\u0277\"\"1!3\u0278*A \"0\u02DC\"\"1!3\u02DD*5 \"0\u02DE\"\"1!3\u02DF*) \"0\u02E0\"\"1!3\u02E1,S&7\xB6*M \"0\u0277\"\"1!3\u0278*A \"0\u02DC\"\"1!3\u02DD*5 \"0\u02DE\"\"1!3\u02DF*) \"0\u02E0\"\"1!3\u02E1\"+)%4\"6\u02E2\"\"! %$\"# \"\"# \"9*\" 3\u02DB"),
          peg$decode("87\xB6*Y \".\u01AE\"\"2\u01AE3\u01AF*M \"0\u0277\"\"1!3\u0278*A \"0\u02DC\"\"1!3\u02DD*5 \"0\u02DE\"\"1!3\u02DF*) \"0\u02E0\"\"1!3\u02E19*\" 3\u02E3"),
          peg$decode("8!7\xB5+S$ &7\xB8*) \".\u010E\"\"2\u010E3\u010F,/&7\xB8*) \".\u010E\"\"2\u010E3\u010F\"+)%4\"6\u02E5\"\"! %$\"# \"\"# \"9*\" 3\u02E4"),
          peg$decode("8!7\xB6*) \"0\u0277\"\"1!3\u0278+;$ &7\xB8,#&7\xB8\"+)%4\"6\u02E7\"\"! %$\"# \"\"# \"9*\" 3\u02E6")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


        var flattenString = function(arrs) {
            var acum ="";
            for(var i=0; i< arrs.length; i++) {
              if(typeof(arrs[i])==='string') {
                acum = acum + arrs[i];
              } else {
                acum = acum + arrs[i].join('');
              }
            }

            return acum;
        }


        var GlobalBlankNodeCounter = 0;

        var prefixes = {};

        var registerPrefix = function(prefix, uri) {
            prefixes[prefix] = uri;
        }

        var registerDefaultPrefix = function(uri) {
            prefixes[null] = uri;
        }

        var arrayToString = function(array) {
            var tmp = "";
            if(array == null)
              return null;

            for(var i=0; i<array.length; i++) {
                tmp = tmp + array[i];
            }

            return tmp.toUpperCase();
        }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})()